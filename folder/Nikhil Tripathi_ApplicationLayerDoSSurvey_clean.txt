See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/351302051 Application Layer Denial-of-Service Attacks and Defense Mechanisms: A Survey Preprint in ACM Computing Surveys May 2021 DOI: 10.1145/3448291 CITATIONS 17 READS 1,257 2 authors, including: Some of the authors of this publication are also working on these related projects: Novel Application Layer Denial-of-Service Attacks and their Detection View project Nikhil Tripathi Indian Institute of Technology Indore 17 PUBLICATIONS 284 CITATIONS SEE PROFILE All content following this page was uploaded by Nikhil Tripathi on 20 May 2021. The user has requested enhancement of the downloaded file. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey NIKHIL TRIPATHI , Fraunhofer Institute for Secure Information Technology, Darmstadt, Germany NEMINATH HUBBALLI, Indian Institute of Technology Indore, India Application layer Denial of Service (DoS) attacks are generated by exploiting vulnerabilities of the protocol implementation or its design. Unlike volumetric DoS attacks, these are stealthy in nature and target a specific application running on the victim. There are several attacks discovered against popular application layer protocols in recent years. In this paper, we provide a structured and comprehensive survey of the existing application layer DoS attacks and defense mechanisms. We classify existing attacks and defense mechanisms into different categories, describe their working, and compare them based on relevant parameters. We conclude this paper with directions for future research. CCS Concepts: Security and privacy Denial-of-service attacks; Intrusion detection systems; Fire- walls; Networks Application layer protocols; Protocol testing and verification. Additional Key Words and Phrases: Protocol-specific and generic application layer DoS attacks, distributed application layer DoS attacks, defense mechanisms ACM Reference Format: Nikhil Tripathi and Neminath Hubballi. 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey. 1, 1 (May 2021), 33 pages. https://doi.org/10.1145/nnnnnnn.nnnnnnn 1 INTRODUCTION Denial of Service (DoS) and its variant, Distributed Denial of Service (DDoS) attacks have been a matter of serious concern for network administrators for the last two decades [12, 169]. These attacks intend to exhaust the resources (memory, CPU cycles, and network bandwidth) and render them unavailable for benign users, thereby, violating one of the major components of cybersecurity - Availability. Launching a DoS attack typically requires less bandwidth from the malicious client s perspective and thus, can be launched using a very small number of devices. On the other hand, launching a DDoS attack requires sending a flood of packets to the victim. A malicious client can launch a DDoS attack using two methods. In the first method, the malicious client sends the flood of packets using spoofed IP addresses (e.g. amplification/reflection attacks [128, 169]). In the second method, the malicious client controls a large number of bots that are compromised using malware (e.g. [31]) and commands these bots to send the flood of packets to the victim. Hacking groups have several motives behind launching these attacks. These range from simply getting recognition in the underground communities to the incentives given by organizations to launch these attacks This work was carried out while Nikhil Tripathi was with IIT Indore. Authors addresses: Nikhil Tripathi, nikhiltripathi@soa.ac.in, Fraunhofer Institute for Secure Information Technology, Darmstadt, Rheinstra e 75, Darmstadt, Hessen, 64295, Germany; Neminath Hubballi, neminath@iiti.ac.in, Indian Institute of Technology Indore, Khandwa Road, Indore, Madhya Pradesh, 453552, India. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. 2021 Association for Computing Machinery. XXXX-XXXX/2021/5-ART $15.00 https://doi.org/10.1145/nnnnnnn.nnnnnnn , Vol. 1, No. 1, Article . Publication date: May 2021. 2 Nikhil Tripathi and Neminath Hubballi against their potential competitors in the market. The well-known network/transport layer DDoS attacks [169] target network equipment and infrastructure to disturb their victim s connectivity. These attacks are known to the community for quite a long time and thus, several surveys have been published that discuss these attacks [42, 102, 118, 169]. Lately, a new class of DoS attacks known as application layer DoS attacks [122] has started gaining popularity. These attacks exploit potential flaws and vulnerabilities present in the application layer protocols [17, 60, 95, 140]. These vulnerabilities are often consequences of inadequate efforts by designers and developers towards secure protocol development. Designing secure protocols is not always considered equally important compared to functionality (e.g. HTTP/2 vs HTTP/1.1 [155]). This leaves behind a large attack surface which is then used by adversaries to launch application layer DoS attacks. These attacks can bring down a server having huge computational power and network bandwidth using very limited resources. Most application layer DoS attacks typically require only one computer to create a DoS scenario at the victim side. Thus, these attacks are usually considered as belonging to the DoS category (instead of the DDoS category) unless stated otherwise. The application layer DoS attacks target specific services on the victim with minimal implication on network resources [95], [60]. These attacks intend to prevent either a server from serving legitimate clients or the individual clients from accessing a resource available at a server. For example, Slow Rate DoS attacks against HTTP [51] intend to prevent a web server from serving the requests sent by genuine HTTP clients [169]. On the other hand, application layer DoS attacks against NTP prevent individual clients from synchronizing their clock with an NTP server [91, 92]. The application layer DoS attacks are known to generate less traffic as compared to network/transport layer DDoS attacks and thus, they are stealthier. Mitigating these attacks by modifying the operation of a protocol is not feasible as it requires modifications in the corresponding RFCs which is a cumbersome process and needs deliberations and discussions between stakeholders which take a substantial amount of time. Moreover, the reflection of these changes in the protocol implementations and releasing their newer versions in the wild by different vendors also take a long time. Recent Trends and Incidents: According to the 2019 Global DDoS Threat Landscape Report of Imperva [73], the largest application layer DoS attack in history was recorded in 2019. This attack lasted for 13 days and peaked at 292,000 Requests Per Second (RPS). Moreover, as per another report [71], the number of application layer DoS/DDoS attacks is doubling after every quarter of a year though the number of network layer assaults in the fourth quarter of 2017 was decreased by a huge margin of 50% from the third quarter of 2017. The popularity of application layer DoS attacks is reflected from another fact that there have been several incidents as shown in Table 1 wherein these attacks were encountered. Besides such reported incidents of DoS/DDoS attacks, there have been several incidents of these attacks due to insider threats that are not reported by the victim organizations fearing negative publicity [150]. Also, several popular application layer DoS attacks such as DHCP starvation attacks are launched within a local network and thus, are not reported. According to a 2018 Insider Threat report [150], 53 % of the organizations confirmed insider attacks against them just in the past year. Besides these incidents, security researchers have recently scrutinized protocols such as Hypertext Transfer Protocol/2.0 (HTTP/2.0) [1, 155], Dynamic Host Configuration Protocol (DHCP) [68, 152, 154], Network Time Protocol (NTP) [91 93], Domain Name System (DNS) [128, 160], etc. to explore potential vulnerabilities in these protocols which can be exploited to launch DoS attacks. To counter these attacks, researchers have also recently proposed appropriate defense mechanisms [38, 68, 93, 153 155]. These recent attacks and corresponding detection and mitigation schemes are not covered in the previous surveys as discussed later in Section 2. Therefore, we argue that a survey covering a comprehensive study of attacks against the most commonly targeted application layer , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 3 Table 1. Application Layer DDoS Attack Incidents Year Target Scale Attack Impact 2020 [126] A state voter registration site 200,000 DNS requests DNS flood Not disclosed 2019 [73] An Imperva client (name not disclosed) 292,000 requests per sec- ond Not dis- closed Not disclosed 2019 [101] National Union of Journalists of the Philippines website 76 Gbps HTTP flood Website went offline 2018 [64] Three banks - ABN AMRO, ING and Rabobank Not disclosed Not dis- closed Disruption of mobile banking services 2017 [115] Bitcoin gold website 10M requests per minute HTTP flood The website went down 2017 [110] Spanish government websites Not disclosed HTTP flood Websites of the constitutional court were taken of- fline 2017 [10] Swedish transportation services Not disclosed HTTP flood Attack caused train delays and disruption of travel services 2016 [8] Finland heating systems Not disclosed DNS flood The heating systems stopped working 2016 [131] HSBC bank website Not disclosed HTTP flood Attack mitigated successfully 2016 [124] Rio Olympic games websites Not disclosed HTTP flood Several Rio Olympic games websites denied access to legitimate clients 2016 [161] DYN s DNS infrastructure Not disclosed DNS flood Popular websites such as Etsy, Github, Spotify and Twitter suffered service interruptions or went of- fline altogether 2016 [96] Liberia s Internet infrastructure Not disclosed Not dis- closed The internet in the country went down 2015 [6] Github s website Not disclosed HTTP flood Github managed to overcome the attack 2014 [53] Hong Kong media website 250 million DNS re- quests per second DNS flood Campaigning for a democratic voting system af- fected 2012 [27] Web infrastucture of several banks 63.3 Gbps HTTP flood Access to online and mobile banking services got affected 2009 [72] Iranian presidential election campaign Not disclosed Slowloris Not disclosed protocols and the defense mechanisms is of critical importance to understand the state-of-the-art in this domain. In this paper, we present a structured survey of various application layer DoS attacks. We also review various state-of-the-art defense mechanisms known to counter attacks against these proto- cols. We make the following specific contributions in this paper: 1. We present a comprehensive survey of application layer DoS attacks and classify them de- pending on whether they are effective against a specific protocol or a large number of protocols. 2. We discuss the working of attacks and compare them based on different parameters. We also describe tools/utilities/libraries that can be used to launch the attacks. 3. We review various defense mechanisms known to counter different application layer DoS attacks and classify them based on their working principle. We also describe the strengths and weaknesses of each defense mechanism and compare them based on several parameters. 4. We compare several popular commercial DoS mitigation products based on their ability to counter different attacks. 5. Towards the end of the paper, we provide various directions for future research in this domain. We organize the paper as follows. In Section 2, we review other related surveys and compare our work with them, justifying the motivation. The organization of the rest of this paper closely follows Figure 1. We discuss protocol-specific application layer DoS attacks and defense mechanisms known to counter these attacks in Section 3. In Section 4, we describe various generic application layer DoS attacks and the defense mechanisms known to counter them. Based on a variety of parameters, we compare different application layer DoS attacks and defense mechanisms in Section 5. We present a comparative study of several popular commercial DoS mitigation products based on their ability to counter different attacks in Section 6. In Section 7, we conclude the paper and suggest some promising future research directions through a careful analysis of the research gap in this domain. , Vol. 1, No. 1, Article . Publication date: May 2021. 4 Nikhil Tripathi and Neminath Hubballi                   !   "    # $%  &'  ( '% ' ) *     )+*  "  '  " ,  -' " # ' )+*     #, " # "# $! "' " "  . "  / 0% Fig. 1. Categorization of Application Layer DoS Attacks 2 PRIOR SURVEYS DoS attacks, in general, are known to the community for quite a long time and therefore several works including surveys have been published in the literature. There are few survey papers [102] in the literature wherein authors presented a taxonomy of different types of DoS attacks. Zargar et al. [169] presented a comprehensive analysis of various defense mechanisms to counter different attacks such as HTTP flooding attacks and Slowloris attacks. Some of the surveys [46, 55, 81] discussed application layer DoS attacks against SIP [62]. In two other recent studies [121, 139], authors attempted to discuss the application layer DoS attacks against HTTP and other web-related protocols. The authors also discussed the defense mechanisms known in the literature to counter these attacks. Our survey differs from the previous surveys in view of the following points: 1. Mirkovic and Reiher [102] presented a taxonomy and survey of application layer DoS attacks but did not discuss the known defense mechanisms to counter those attacks. However, we not only present a comprehensive survey of different application layer DoS attacks but also discuss the detection and mitigation performance of various defense mechanisms to counter each attack type. 2. Unlike [169] which primarily focuses on flooding-based DDoS attacks only, we cover different aspects of non-volumetric attacks also and discuss how these attacks exploit the working of different protocols1. Moreover, the survey presented in [169] is published more than five years ago and thus does not cover recent application layer DoS attacks and defense mechanisms. 3. Geneiatakis et al. [55], Keromytis [81], and Ehlert et al. [46] discussed attacks and defense mechanisms related to SIP only. Recently in [121], authors covered different application layer DDoS attacks that target web infrastructure. On the other hand, we present a detailed analysis of DoS attacks and corresponding defense mechanisms by taking several application layer protocols into account. 4. The survey on Slow HTTP DoS attacks and HTTP-GET flood DDoS attacks is presented in [139]. However, in this survey, we not only take these attacks into account but also discuss a variety of other protocol specific and generic DoS attacks. A comparison of the existing surveys on application layer DoS attacks and corresponding defense mechanisms with our survey is given in Table 2. A tick mark ( ) in the table represents that a survey 1We do not cover attacks that exploit vulnerabilities present in a protocol s specific software implementation as security updates released by vendors from time to time appropriately patch these vulnerabilities. , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 5 Table 2. Comparison with Some of the Existing Surveys References Starvation Timeshifting /Timesticking Slow HTTP Slow Rate Request Flood Corresponding Defense Mechanisms Praseed and Thilagam [121] Singh et al. [139] Keromytis [81] Zargar et al. [169] Geneiatakis et al. [55] Ehlert et al. [46] This survey paper discusses the attack or defense mechanism. We can notice from the table that most of the previous survey papers focused only on request flood attacks but did not review other application layer DoS attacks. Taking motivation from this, in this survey, we present a systematic review of different application layer DoS attacks and corresponding defense mechanisms. 3 PROTOCOL-SPECIFIC DOS ATTACKS A protocol-specific DoS attack is effective against a particular application layer protocol only. Examples of protocol-specific attacks are DHCP Starvation attacks, NTP timeshifting/timesticking DoS attacks, and Slow HTTP DoS attacks as shown in Figure 1. We describe these attacks and the corresponding defense mechanisms to counter them in this section. 3.1 DHCP Starvation Attacks DHCP [44] is used to automate the IP address allocations to the clients within a network. A client, on joining the network, exchanges four DHCP messages viz. Discover, Offer, Request, and Acknowledgment with the DHCP server to obtain an IP address. The DHCP server is configured with an IP address pool from which it selects one freely available address and offers it to the client. Subsequently, the client uses the offered IP address to access network resources. DHCP is known to be vulnerable to DHCP starvation attacks due to the lack of any built-in authentication scheme [152]. These attacks intend to prevent a legitimate client from obtaining an IP address. As shown in Figure 1, two types of DHCP starvation attacks that are known in the literature- Classical and Induced DHCP starvation attacks. Classical DHCP starvation attack is known in the community for quite long, however, recently, a new type of starvation attack called Induced DHCP starvation attack [68, 152, 154] is disclosed. 3.1.1 Classical DHCP Starvation Attack. This attack involves sending bogus requests repeatedly (using spoofed random MAC addresses [158, 159]) to consume the IP address pool [68]. Once the pool is consumed, the DHCP server is unable to offer IP addresses to the new clients. As a result, the clients can not communicate with other devices which leads to DoS. Recently, Hubballi and Tripathi [68] showed that since this attack requires MAC spoofing, it raises the bar for the malicious client to launch this attack in wireless networks secured with Wireless Protection Access 2 (WPA2). 3.1.2 Induced DHCP Starvation Attack. Similar to the classical DHCP starvation attack, Induced DHCP starvation attack also prevents clients from obtaining an IP address. This attack exploits IP conflict detection schemes present at server and client sides. Using this scheme, a DHCP server first ensures that an IP address it is going to offer to a client is not being used by some other client in the network. Similarly, the client before using the offered IP address also checks that no other client is using that IP address [44]. For conflict detection purpose, a broadcast probe request is sent into the network. To prevent the client from obtaining the IP address, a malicious client simply , Vol. 1, No. 1, Article . Publication date: May 2021. 6 Nikhil Tripathi and Neminath Hubballi injects a spoofed probe reply. As a result, IP conflict [44] is detected in the network, and the DHCP client is not able to successfully obtain the IP address. Depending on which (client s or server s) conflict detection scheme is exploited and what type of probe is used (ARP or ICMP), there are three different variants [68, 152, 154] of Induced DHCP starvation attack. Tools: There are a plethora of tools that can be used to launch classical DHCP starvation at- tack. Among them, the most popular ones are Gobbler [57] and dhcpig [36]. However, there are no publicly available tools to launch an Induced DHCP starvation attack. Nevertheless, packet crafting tools such as Scapy [130] can be used to launch this attack. Scapy runs natively on Linux and most Unix operating systems with libpcap and its python wrappers. 3.1.3 Defense Mechanisms. Though works on Induced DHCP starvation attack [68, 152, 154] are published recently, classical DHCP starvation attack has been known to the security community for a long time. Thus, several researchers have proposed methods to detect and defend against classical DHCP starvation attack. We classify the known defense mechanisms into different categories and subsequently discuss their ability to counter classical and Induced DHCP starvation attacks. 1. Cryptographic Techniques: To mitigate the DHCP starvation attacks, various cryptographic techniques [33, 34, 45, 144] are proposed in the literature that enforce authentication in DHCP. These techniques are well known to mitigate any spoofing attack including the DHCP starvation attacks but due to high deployment complexity and manual intervention of network administrators for managing certificates, these techniques are rarely deployed in real networks. 2. Security Features in Switches: Security features such as port security [26] and Dynamic ARP Inspection (DAI) [25] can be configured in state-of-art network switches to mitigate different network attacks. Port security restricts the count of MAC addresses seen on a switch port. Thus if the number of MAC addresses seen on a port exceeds a predefined threshold it is immediately blocked, thereby, preventing MAC spoofing. DAI checks the validity of an Address Resolution Protocol (ARP) [119] message to prevent ARP spoofing by querying DHCP snooping database that contains valid IP-MAC bindings. However, in [68], the authors showed that DAI fails to mitigate ARP spoofing (and thus, Induced DHCP starvation) if the spoofed ARP reply sent by the malicious client does not pass through the switch [68]. 3. Using DHCP Relay Agent: In [117], authors proposed an approach wherein a DHCP relay agent (default gateway) puts the switch ID and switch port number (to which a client is connected) in a DHCP message and forwards it to the DHCP server. Subsequently, the DHCP server counts the IP addresses allotted to the client by matching the switch ID and port number and ensures that this count does not cross a predefined threshold, thereby, preventing DHCP starvation attacks. 4. DHCP Traffic Profiling: Defense mechanisms falling under this category compare traffic pro- files generated during different time intervals of testing and training phases. An abstract overview of the working of these defense mechanisms is shown in Figure 2. In this direction, Hubballi and                  Fig. 2. Working of DHCP Traffic Profiling based Defense Mechanisms , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 7 Tripathi [68] proposed a detection approach wherein normal DHCP traffic profile is generated during the training phase and subsequently compared with the traffic profiles generated during different time intervals of the testing phase using Hellinger Distance (HD) [20]. If the calculated HD exceeds a predefined threshold, the time interval under consideration is declared as containing attack traffic. In [153], the authors presented a detection approach that simply compares the number of different DHCP messages received (at the detector within the network) in a time period (e.g. 10:00am-10:15am) of a day during training and testing phases. If the difference in the number of messages exceeds a preset threshold, an anomaly is detected in that period. 5. Machine Learning based: Tripathi and Hubballi [154] proposed a detection approach wherein they tested the ability of different one-class classification algorithms to detect variants of the In- duced DHCP starvation attack. However, the authors did not test the performance of the algorithms to detect classical DHCP starvation attack. Table 3 shows the ability of various defense mechanisms to detect/mitigate different DHCP starvation attacks while Table 4 summarizes different categories of defense mechanisms along with their strengths and limitations. Table 3. Defense Mechanisms v/s DHCP Starvation Attacks Defense Mechanisms Classical[68] Induced: 1 Variant [68] Induced: 2 Variant [152] Induced: 3 Variant [154] Cryptographic Techniques Security Features in Switches Port Security DAI Using DHCP Relay Agent DHCP Traffic Profiling Machine Learning based Table 4. Approaches to Counter DHCP Starvation Attacks Category Research Work Defense Mechanism Strength Weakness Cryptographic Techniques Graaf et al. [33], Demarjian and Serhrouchni [34], Duangphasuk et al. [45], Su et al. [144] Mitigation by enforcing authentica- tion in DHCP Can mitigate all types of iden- tity spoofing based attacks Very high implementation com- plexity Security Features in Switches Port Security [26] Mitigation by blocking a switch port if more than threshold number of MAC addresses are seen Easy to deploy Can not mitigate Induced DHCP starvation attack [154] DAI [25] Mitigation by dropping packets based on MAC-IP associations present in DHCP snooping data- base Easy to deploy Can not mitigate Induced DHCP starvation attack [154] Using DHCP Relay Agent Patrick [117] Mitigation by putting a limit on number of IP addresses assigned to a client Can detect and mitigate clas- sical DHCP starvation attack Can not mitigate Induced DHCP starvation attack DHCP Traffic Profiling Hubballi and Tripathi [68] Detection by comparing DHCP traffic profiles using Hellinger Dis- tance Lightweight Can not detect classical DHCP star- vation attack Tripathi and Hubballi [153] Detection by predicting the count of DHCP messages in different time intervals Can detect both classical and Induced DHCP starvation at- tack Difficult to set a predefined thresh- old Machine Learning Tripathi and Hubballi [154] Detection using machine learning algorithms Easy to deploy Can not detect classical DHCP star- vation attack 3.2 Timeshifting/Timesticking DoS Attacks against NTP NTP [100] is one of the oldest protocols currently being used on the Internet. It was designed to synchronize clocks of different computer systems connected to the Internet. Malhotra et al. [91 93] recently disclosed timeshifting/timesticking attacks that target the working of NTP protocol and aim to disturb the clock synchronization process of computers with NTP servers. A wrongly , Vol. 1, No. 1, Article . Publication date: May 2021. 8 Nikhil Tripathi and Neminath Hubballi synchronized clock may lead to failure of various core Internet services such as DNS and Resource Public Key Infrastructure (RPKI) [14] which results in DoS at a large scale. As shown in Figure 1, different types of known attacks against NTP are as follows: 3.2.1 Deja Vu (On-path Timesticking Attack). To launch this attack [92], a Man-in-the-Middle (MitM) malicious client between an NTP broadcast server and a victim client first captures a contiguous sequence of broadcast packets sent from an NTP server and then replays this sequence at regular interval to the victim client. This causes the victim s clock to be stuck at a particular time which results in the failure of core Internet services on the victim. 3.2.2 On-path Timeshifting Attack. To launch this attack [91], a malicious client sends bogus small time shifts to a victim client, and then, when the malicious client is ready, it sends a big time shift to the victim client to create DoS. 3.2.3 Off-path DoS Attacks. In [91 93], Malhotra et al. presented three variants of off-path DoS attacks against NTP wherein a malicious client irrespective of its location can prevent clock syn- chronization of an NTP client connected to the Internet. 1. DoS by spoofed Kiss-o -Death [91]: NTP defines a rate-limiting mechanism using a spe- cial purpose packet known as the Kiss-o -Death (KoD) packet. This packet is sent by an NTP server to a client if the client sends NTP packets to the server with a rate that exceeds predefined threshold rate. To launch this attack variant, an off-path malicious client exploits this rate-limiting mechanism by sending a spoofed KoD packet to the victim NTP client for each of the client s pre-configured NTP servers. On receiving KoD packets, the client immediately stops sending NTP packets to the servers due to which it is not able to synchronize its local clock. In another recent work [156], authors proposed an attack that prevents an NTP broadcast client from synchronizing its clock with an NTP server. To prevent this attack, the malicious client forces the NTP broadcast server to generate genuine KoD packets by sending it a large number of NTP packets that are spoofed to like they are coming from the victim client. However, this attack is relatively less stealthy as it requires sending several spoofed NTP packets. 2. DoS by Bad Authentication [92]: In this variant, an off-path adversary targets a victim NTP client that relies on a broadcast NTP server to synchronize its local clock. The NTP client and the broadcast server usually authenticate each other using a pre-configured key. To launch this variant, the adversary simply sends to the victim a badly authenticated NTP broadcast packet which is spoofed to look like it is coming from the broadcast NTP server. Due to this bad authenticated packet, the victim client breaks its association with the broadcast server. 3. Interleaved-pivot Attack [93]: In this variant, a malicious client first sends a single packet to the victim client which is spoofed to look like it is coming from the NTP server. On receiving this packet, the victim client believes that the server is in interleaved mode (a very high accurate mode of NTP operation) [100]. Due to this, the victim client also enters into the interleaved mode and subsequently rejects all legitimate client/server mode packets exchanged with the server (which is actually not in the interleaved mode). 3.2.4 Off-path Timeshifting Attacks. Malhotra et al. [91] presented two variants of off-path timeshift- ing attacks against NTP. To launch the first attack variant, Pinning to Bad Timekeepers, the malicious client sends a KoD packet to the victim client which is spoofed to look like it is coming from the le- gitimate NTP server to which the victim client has correctly synchronized. The malicious client does so to prevent the client from synchronizing its clock with the synchronized server and ultimately forcing it to take time from an NTP server not having an up-to-date clock. To launch the second attack variant called DoS using IP Fragmentation, the malicious client hijacks an unauthenticated , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 9 NTP connection established between a client and a server by exploiting certain IPv4 fragmentation policies used by the client s and server s operating systems. Tools: In order to launch these attacks, there are no specific tools available. Nevertheless, Scapy [130] and other similar libraries providing raw socket programming support can be used to execute these attacks. 3.2.5 Defense Mechanisms. Since launching NTP timeshifting/timesticking DoS attacks require spoofing the IP address of an NTP client or server, schemes that are known to detect spoofed IP packets can also be deployed to detect these attacks [69, 162, 169]. Zargar et al. [169] presented a comprehensive study of different IP spoofing mitigation approaches. In this survey, we cover only those defense mechanisms that are specifically designed to counter DoS attacks against NTP. We classify defense mechanisms known to counter attacks against NTP into different categories and discuss their ability to counter the attacks. 1. Cryptographic Techniques: Some approaches [43, 93] use cryptographic techniques to au- thenticate NTP packets in order to mitigate the known attacks. However, though NTP supports cryptographic authentication, NTP traffic is very rarely authenticated in practice [91] because of various reasons such as cumbersome key distribution mechanism, weaknesses in the Autokey protocol for public-key authentication, etc. [104]. This leads to the development of NTPsec [86, 151]. Unfortunately, the adoption of NTPsec is still very slow and moreover, authentication and encryp- tion do not mitigate MitM attacks as an MitM adversary can simply drop traffic destined to port 123 (default for NTP). 2. Path Redundancy: A class of work in the literature utilize path redundancy on the Internet to avoid MitM adversaries [103, 137]. Under this approach, multiple paths on the Internet are used to connect NTP clients and servers. Thus, even if one of the paths between an NTP client and a server is compromised, the client is able to synchronize its clock by exchanging NTP packets over other paths. The drawback of this approach is that it can not mitigate attacks that do not require a MitM position (Off-path DoS, for example). 3. Server Redundancy: Recently, Deutsch et al. [35] proposed a new NTP client Chronos which first generates server redundancy by creating large server pools and then carefully samples servers in these pools. Since Chronos synchronizes its clock with the help of large server pools, even a malicious client with MitM position can not stop the client from obtaining correct time information from other servers. As a result, this approach is resilient to on-path attacks. In the case of off-path attacks, Chronos clock selection algorithm rejects wrong time information received from a mali- cious adversary as it differs from the clock values of servers present in the pool. Thus, Chronos is resilient to off-path attacks as well, thereby, overcoming the limitations of multi-path approaches proposed in [103, 137]. Table 5 shows the detection/mitigation ability of various defense mechanisms to counter attacks against NTP while Table 6 summarizes different categories of defense mechanisms along with their strengths and limitations. 3.3 Slow HTTP DoS Attacks HTTP is considered as one of the most studied application layer protocols against DoS attacks. Several types of Slow HTTP DoS attacks have been studied since last decade. Slow HTTP DoS attacks [157, 169] involve sending specially crafted web requests which interact with the server very slowly. Unless a web request is completely served, the server keeps it in a connection queue having limited space. Once this queue is filled with unserved requests, the server does not entertain , Vol. 1, No. 1, Article . Publication date: May 2021. 10 Nikhil Tripathi and Neminath Hubballi Table 5. Defense Mechanisms v/s Different Attacks against NTP Defense Mechanisms On-path Timesticking [92] On-path Timeshifting [91] Off-path DoS-1 [91] Off-path DoS-2 [92, 156] Off-path DoS-3 [93] Off-path Timeshifting-1 [91] Off-path Timeshifting-2 [91] Cryptographic Techniques Path Redundancy Server Redundancy Table 6. Approaches to Counter Different Attacks against NTP Category Research Work Defense Mechanism Strength Weakness Cryptographic Techniques Malhotra et al. [93] Mitigation using a new backwards- compatible client/server protocol for NTP Can mitigate all types of iden- tity spoofing based attacks Difficult to deploy Dowling et al. [43] Mitigation by infrequently performing a key exchange using public key cryptogra- phy and then relying solely on symmetric cryptography Suitable for large-scale de- ployments Creates attack surface for NTP am- plification attack Path Redundancy Mizrahi [103] and Shpiner et al. [137] Mitigation by establishing multiple paths between NTP clients and servers Can detect and mitigate on- path attacks Ineffective in case of off-path DoS attack Server Redundancy Deutsch et al. [35] Mitigation by preventing the client from taking time from a compromised server Can mitigate both on-path and off-path attacks Requires modification at the client- side which may hinder its adapta- tion any more requests, resulting in a DoS attack. The DoS attacks belonging to this category are shown in Figure 1 and are as follows: 3.3.1 Slow Header or Slowloris Attack. To launch the Slow Header attack [157, 169], an adversary sends incomplete HTTP GET requests to a web server to exhaust the connection queue space. In [157], authors evaluated this attack against 100 live websites and showed that several of them are vulnerable to it. Recently, Tripathi and Hubballi [155] proposed an attack similar to the Slow Header attack against HTTP/2 and showed that the attack is effective against different popular web servers. 3.3.2 Slow Message Body Attack. Slow Message Body attack [157, 169] requires sending complete header of POST request but incomplete message body. Thus, the server keeps these requests in the connection queue unless it receives a complete message body. In [157], the authors presented an evaluation of this attack against four web server implementations and showed that the attack is effective against three of them. Recently, authors in [155] proposed an attack similar to the Slow Message Body attack against HTTP/2 and showed that the attack is effective against different popular web servers. 3.3.3 Slow Read Attack. To launch Slow Read attack [74], an adversary initially sends a benign GET request to a web server and then sends a TCP packet advertising window size of zero bytes. This prevents the server from sending any data to the adversary. Nevertheless, the server stores the connection in connection queue space and waits to receive from the adversary a TCP packet advertising "non-zero window size" [157]. The adversary, however, does not advertise a new window size due to which the server waits for an indefinite amount of time. In [155], the authors tested a similar attack against HTTP/2 and showed that the attack is effective against different popular web servers. 3.3.4 HTTP PRAGMA Attack. HTTP PRAGMA attack [32] exploits a field called PRAGMA in the HTTP header. This field is used by the browsers to request the web server to send a resource against which the client has already requested earlier. On receiving such a request, the server resets , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 11 the connection timeout due to which the connection stays longer in the connection queue. The malicious client creates several such connections and sends the PRAGMA requests from each of them to exhaust the server s connection queue space, thereby, preventing legitimate requests from being served. Tools: Slowloris [5] and SlowHTTPTest [135] are two such tools that can be used to generate Slow Header attack. R U DEAD YET (RUDY) [129] is a popular tool which can be used to launch a Slow Message Body attack. However, there is no tool available to launch Slow Read and HTTP Pragma attack. Nevertheless, special requests can be crafted using Scapy [130] to launch these attacks. 3.3.5 Defense Mechanisms. We classify defense mechanisms to counter Slow HTTP DoS attacks into three different categories as described below: 1. Implementation Modules: To mitigate Slow HTTP DoS attacks, four modules - Core [28], Antiloris [105], Limitipconn [106] and mod_reqtimeout [107] are particularly available for Apache server. The first module Core buffers entire HTTP requests at the kernel level before forwarding them to the server. This ensures that incomplete HTTP requests do not go to the server s connection queue. On the other hand, the second and third modules limit the number of incoming complete/incomplete requests on a per IP basis while the fourth module requires a sender to send a complete request and/or complete message body within a predefined amount of time. 2. Comparing Traffic Profiles: Tripathi et al. [157] proposed an approach wherein normal HTTP traffic profile is generated during the training phase and subsequently compared with the traffic profiles generated during different time intervals of the testing phase using Hellinger Distance (HD) [20]. The traffic profile is comprised of four vectors denoting the probability of occurrence of incomplete and complete POST and GET requests. If the calculated HD crosses a predefined threshold, the time interval under consideration is declared as containing attack traffic. In another work [155], Tripathi and Hubballi proposed a similar approach to detect different Slow Rate DoS attacks against HTTP/2. 3. Monitoring Traffic Features: A class of work in the literature proposes to monitor different traffic features to detect Slow HTTP DoS attacks. One such approach is discussed in [32] which detects attacks by monitoring the number of bytes the server sends and receives for each request. If the server runs out of connection queue space, it drops a connection over which the number of sent and received bytes exceeds a predefined threshold. Table 7 shows the detection/mitigation ability of various defense mechanisms to counter Slow HTTP DoS attacks while Table 8 summarizes different categories of defense mechanisms along with their strengths and limitations. Table 7. Defense Mechanisms v/s Slow HTTP DoS Attacks Defense Mechanisms Slow Header [5] Slow Message Body [157] Slow Read [74] HTTP PRAGMA [32] Implement- ation Modules Core Antiloris Limitipcon mod_reqtimeout Comparing Traffic Profiles Monitoring Traffic Features 4 GENERIC DOS ATTACKS Unlike protocol-specific attacks, this class of application layer DoS attacks is effective against a large number of application layer protocols. As shown in Figure 1, examples of generic application , Vol. 1, No. 1, Article . Publication date: May 2021. 12 Nikhil Tripathi and Neminath Hubballi Table 8. Approaches to Counter Slow HTTP DoS Attacks Category Research Work Defense Mechanism Strength Weakness Implementation Modules Core [28] Mitigation by preventing incomplete requests from going to server s connec- tion queue Can be easily configured in Apache web server Can not mitigate HTTP PRAGMA attack Antiloris [105], Limitipconn [106] Mitigation by limiting the number of incoming complete/incomplete re- quests on a per IP basis Can mitigate all types of Slow HTTP DoS attacks Ineffective if an attack is launched using multiple IP addresses mod_req- timeout [107] Mitigation by ensuring that a complete request is received within a predefined amount of time Can be easily configured in Apache web server Can not mitigate HTTP PRAGMA attack Comparing Traffic Profiles Tripathi et al. [157] Detection by comparing HTTP traffic profiles generated during training and testing phase using Hellinger Distance Can detect both Slow Mes- sage Body and Slow Header attacks with very high accu- racy Can not mitigate the attacks Tripathi and Hubballi [155] Detection by comparing HTTP/2 traf- fic profiles generated during training and testing phases using Chi-square statistical test Can detect all types of DoS at- tacks known against HTTP/2 Can not mitigate the attacks Monitoring Traffic Features Dantas et al. [32] Mitigation by dropping an established connection if the number of bytes sent and received from it exceeds a prede- fined threshold Can mitigate the attacks May drop legitimate connections if the web page being accessed con- tains large objects layer DoS attacks are Slow Rate generic and Request Flood attacks which are effective against a large number of popular protocols such as HTTP, SMTP, FTP, SIP, DNS, etc. These attacks are also known as meta attacks [17]. In this section, we describe these attacks and the defense mechanisms known to counter them. 4.1 Slow Rate Generic DoS Attacks There are four protocol-independent Slow Rate generic DoS attacks as shown in Figure 1. These attacks exploit features that are known to exist in TCP based application layer protocols such as HTTP, SMTP, and FTP [18, 19]. Moreover, these attacks can also adopt their behaviour to target a wide variety of TCP based protocols [3]. In this subsection, we describe the working of these attacks and subsequently discuss the defense mechanisms known to counter them. 1. SlowReq/SlowDroid Attack: Slowloris attack, as discussed earlier in Section 3.3.1, involves sending multiple incomplete HTTP requests to the web server to exhaust the connection queue space. The malicious client never sends the remaining portion of the HTTP request and thus the server deletes the incomplete request from the connection queue after the timeout counter ( 300 for Apache [157]) expires. Thus, it becomes relatively difficult for the malicious client to fill the connection queue as it has to keep sending incomplete requests. However, authors in [3] proposed that if small chunks of a request (e.g. one byte each) are sent continuously at regular intervals, the target server keeps on resetting the connection timeout counter. This forces the target server to keep the incoming request in the connection queue for a very long duration of time ( 990 for Apache [157]). Once the connection queue space is exhausted, the server is not able to serve legitimate requests. Based on this observation, the authors proposed the SlowReq attack [3]. Moreover, the authors discussed that SlowReq can adopt this behaviour of sending request chunks slowly at regular intervals for other TCP based protocols such as SMTP and FTP also. This makes SlowReq effective against a large number of TCP-based application layer protocols, unlike Slowloris which is effective only against HTTP. In another work [15], Cambiaso et al. proposed the SlowDroid attack, a variant of SlowReq attack which requires minimal computational resources and thus, can be launched even from mobile phones. 2. Slowcomm Attack: Cambiaso et al. [16] proposed an attack called Slowcomm that exploits the knowledge of the Retransmission Time Out (RTO) timer which is used for congestion control in , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 13 TCP. The proposed attack targets TCP based application layer protocols. It can detect connection closes and immediately establish them again. Similar to SlowReq, Slowcomm also requires sending protocol independent request chunks at regular intervals but detecting connection closes is what makes Slowcomm more effective than the SlowReq attack. 3. Slow Next Attack: To launch the Slow Next DoS attack [18], an adversary uses persistent connection features of protocols such as HTTP, SMTP, FTP, and SSH [18, 19] which keeps the con- nections alive for a longer duration. The adversary establishes several persistent connections with the server and sends benign requests from each connection periodically to consume the connection queue space. This attack is stealthier than Slow Rate DoS attacks as the server successfully parses the complete requests and sends back the response. 4. SlowDrop Attack: Similar to the Slow Next attack, the SlowDrop attack [19] also uses a persis- tent connection feature of different protocols to prolong the connection waiting time at the server. In this attack, an adversary first requests a large resource to the server and then drops the receiving packets by behaving as an unreliable client. Due to the persistent connection and the intentional dropping of packets, the waiting time for the connection is prolonged at the server. An adversary establishes a large number of such connections with the server to prevent legitimate clients from establishing a connection with the server, thereby causing the DoS scenario. Tools: The tool to launch the Slowdroid attack is available at [113] but for other attacks, there are no tools available. Thus, these attacks can be launched by crafting special requests using Scapy [130] and sending them using raw sockets. 4.1.1 Defense Mechanisms. We classify the known defense mechanisms to detect Slow Rate generic DoS attacks into one category as discussed below. 1. Monitoring Traffic Features: Mongelli et al. [109] and Aiello et al. [2] proposed defense mechanisms that detect attacks by counting the number of packets received by a server in an interval. If the number of packets received in the interval exceeds a predefined threshold, the interval is considered as containing attack traffic. Another detection scheme was proposed in [138] which monitors the rate of requests sent by a client to the server. If the sending rate exceeds a predefined threshold, the requests are further scrutinized by analyzing their impact on the server s resources (CPU, memory, etc.). If all requests from this suspicious user fall within thresholds, the user is then considered as a legitimate one and its requests are transferred to the regular application. Table 9 shows the detection/mitigation ability of the defense mechanisms to counter Slow Rate generic DoS attacks while Table 10 summarizes the category of defense mechanisms along with their strengths and limitations. Table 9. Defense Mechanisms v/s Slow Rate DoS Attacks Defense Mechanisms SlowReq [3] Slowcomm [16] Slow Next [18] SlowDrop [19] Monitoring Traffic Features 4.2 Request Flood Attacks Another category of generic application layer DoS attacks is request flood attacks as shown in Figure 1. In these attacks, an adversary sends a flood of requests to a victim server to overwhelm it and prevent it from serving legitimate requests. Launching these attacks require more computers as compared to Slow Rate DoS attacks. As a result, they are typically considered as belonging to the DDoS category. Since the adversary has the option of sending a flood of packets belonging to different protocols, there are different types of request flood attacks out of which most popular , Vol. 1, No. 1, Article . Publication date: May 2021. 14 Nikhil Tripathi and Neminath Hubballi Table 10. Approaches to Counter Slow Rate DoS Attacks Category Research Work Defense Mechanism Strength Weakness Monitoring Traffic Features Mongelli et al. [109] and Aiello et al. [2] Detection by tracking number of packets server receives in a time in- terval Can be easily deployed to find the traffic anomalies High false positive rate in case of scenarios such as Flash Event [11] Shtern et al. [138] Mitigation by checking the rate with which a user is sending the requests and further scrutinizing the requests based on how they impact server re- sources Can detect and mitigate all types of Slow Rate DoS at- tacks Difficult to develop performance model based on different server re- sources ones are HTTP Flood, SIP Flood, and DNS Flood. 1. HTTP Flood: HTTP flood attack is the most popular type of request flooding attack. An adversary can launch this attack by sending a flood of HTTP requests to a web server to exhaust its resources which leads to a DoS scenario for legitimate clients. The popular attacks belonging to this category are HTTP GET and HTTP POST flooding attacks [169] in which the adversary sends several benign HTTP requests to a victim server. An adversary also has the option of sending a specially crafted small request from each established connection that causes the web server to perform some CPU-intensive tasks which result in a high workload at the web server. This attack is commonly known as Repeated One Shot or Asymmetric Workload attack [122]. In [1], authors described different flooding attacks against HTTP/2 which involve sending a flood of web requests to an HTTP/2 enabled server to create DoS scenario. 2. SIP Flood: SIP flood attack [70] is characterized by sending a flood of SIP messages to an SIP entity to make it difficult to process these messages and eventually to crash the system. This attack mainly targets the resources of the SIP system like memory, CPU, and bandwidth to crash it. SIP flood attacks can be launched by sending several REGISTER, BYE, or INVITE messages to different components of the SIP system such as SIP Registrar, SIP proxy, etc. A malicious client can also launch a malformed message-based flood attack against an SIP entity wherein it sends a flood of malformed SIP messages to the victim. On receiving these messages, the entity processes them but eventually drops them. This leads to the wastage of CPU cycles of the SIP entity. 3. DNS Flood: DNS protocol is one of the core protocols of Internet infrastructure. Compromising the working of DNS protocol may lead to disruption of other important services such as web, mail, etc. To launch a DNS flood attack [161], an adversary sends a flood of DNS queries to a DNS server to prevent it from processing and serving DNS queries sent by benign clients. Tools: Depending on the protocol being targeted, different tools can be used to launch the request flood attacks. The most popular request flood attack is the HTTP flood attack and thus, there are a large number of popular automated tools such as HTTP Unbearable Load King (HULK) [63], and Low Orbit Ion Cannon (LOIC) [89] that can be used to launch HTTP flood attack. On the other hand, tools like StarTrinity SIP Tester [143] and inviteflood [76] can be used to launch SIP flood attack. To launch DNS flood attack, tools such as DNS-flood-ng [41] can be used. Defense Mechanisms: Several works are available in the literature that discuss defense approaches to detect and mitigate request flood attacks. We classify these defense mechanisms into different categories as shown in Figure 3. Since the defense mechanisms are specific to the protocol, we discuss them by taking one protocol into account at a time. 4.2.1 Defense Mechanisms to Counter HTTP Flood Attack: The defense mechanisms known to counter the HTTP flood attack can broadly be classified into four different categories as follows: , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 15                  !" #$   # %         "  &      &    # %  ' (  '%  )  ((      (   '*   + &   & (   (           )       ,    ((   ))  "          &)   Fig. 3. Defense Mechanisms to Counter Request Flood Attacks 1. Analyzing Web Browsing Behaviour: Most of the defense mechanisms known to counter HTTP flood attack fall under this category. These defense mechanisms involve modeling normal web browsing behaviour using different features such as request rate, number of unique source IP addresses encountered in a time interval, packet size, sequence of web page access, etc. Ranjan et al. [122] proposed an approach that analyzes characteristics like "Session Arrival Time, Session Inter-arrival Time and Request Inter-arrival Time" [122] to create a web profile of different users. If a user s profile significantly deviates from this predefined profile, the user is considered as a malicious one. Yatagai et al. [168] proposed an approach that correlates average user reading time and page information size to detect anomalies. In another work [84], Lee et al. represented normal web surfing behaviour using attributes such as "Number of User Requests, Average Number of Requests and Access Frequency of Most Popular Page" [84]. Subsequently, the authors used a multiple PCA model to distinguish legitimate and flood attack traffic. Oikonomou and Mirkovic [114] used three aspects of web browsing behaviour - "Request Dynamics, Request Semantics and Ability to Process Visual Clues" [114] to distinguish legitimate and malicious requests. Xu et al. [167] introduced an extended random walk model to establish a benign pattern of browsing sequences to detect asymmetric DoS attacks. For each client, a browsing pattern is generated and if it deviates from the pre-established normal pattern, the attack is detected. Xie and Yu [165] proposed an extended Hidden semi-Markov Model (HsMM) to create web browsing profiles of different users. In particular, the authors approximated the time required by a client to read a web page in terms of the number of in-line requests made by the page. Subsequently, an Original Likelihood Distribution (OLD) is constructed that represents the client s browsing behaviour. If this browsing behaviour deviates from the pre-constructed model, the client is detected as anomalous. In other similar work, Xie and Yu [166] constructed HsMM based on the web page popularity to describe web browsing behaviour. Wang et al. [163] and Singh et al. [140] proposed approaches that rely on the fact that the surfing preference of a benign user is much more consistent with the web page popularity than that of an adversary. 2. Monitoring Request Attributes: Chwalinski et al. [23, 24] proposed approaches that differ- entiate malicious and legitimate HTTP connections based on the request count per resource sent from each connection. Based on this distinguishing feature, the detection approach groups users into different clusters using K-means clustering. An incoming connection that can not be assigned to any cluster is considered as anomalous one. To handle cases when values of some of the features are less than the threshold values while some features values exceed this threshold, authors used a Hidden Semi Markov model for accurately classifying the connection. Jazi et al. [77] proposed a detection approach that identifies changes in the number of HTTP request packets received at a , Vol. 1, No. 1, Article . Publication date: May 2021. 16 Nikhil Tripathi and Neminath Hubballi server and the number of corresponding network packets carrying these requests to detect HTTP flood attack. 3. Entropy Evaluation: A class of works in the literature use entropy as a measure to differentiate legitimate and malicious client. Legitimate HTTP requests vary in size, rate, and intent while flood attack requests are uniform and follow some periodicity. As a result, requests belonging to a flood attack possess lower entropy as compared to legitimate requests [121]. Singh et al. [78, 141] used "Multilayer Perceptron with Genetic Machine Learning Algorithm" (MLP-GA) to distinguish malicious and legitimate connections. In [78] the features used are the "Entropy Variance per IP Address, Entropy of HTTP GET Request Count per Connection and the Number of HTTP GET Request Counts" while in [141], the features used are "Number of IP Addresses, Number of HTTP Requests and Fixed Frame Length". 4. Challenge Based: Some of the works identify automated requests sent during a flood attack using challenges such as "Completely Automated Public Turing test to tell Computers and Hu- mans Apart (CAPTCHA) and Are You a Human (AYAH)" [121]. Ndibwile et al. [112] proposed a mitigation scheme wherein three web servers are used viz. a real web server, a bait, and a decoy server. The incoming requests are first forwarded to the bait server where the incoming requests are marked as suspicious or legitimate based on a javascript pop-up dialogue box. Subsequently, the legitimate requests are redirected to the real server but the suspicious requests are redirected to the decoy server. At this server, the same authentication method is again used to authenticate the suspicious traffic which, if found legitimate, is routed to the real web server. Zhang et al. [170] proposed a defense approach that identifies malicious traffic by using client-side physical uplink bandwidth as a challenge to identify malicious traffic. Suriadi et al. [146] proposed an approach that sends to a client a hash-based computation-bound puzzle and the corresponding solution inside a SOAP header. In response, the client needs to determine a partial preimage in a hash function to differentiate itself from a bot. Table 11 gives an overview of different categories of defense mechanisms and research works falling under each category along with their strengths and limitations. 4.2.2 Defense Mechanisms to Counter SIP Flood Attack. As shown in Figure 3, The defense mecha- nisms known to counter SIP flood attack [70] can broadly be classified into five different categories as follows: 1. Cryptographic Techniques: To mitigate the SIP flooding attack, Arkko et al. [7] proposed an approach for negotiating the security mechanisms such as Transport Layer Security (TLS) protocol [37] that are used between SIP entities in the SIP infrastructure. In another work, Farley and Wang [49] proposed pre-distributed shared key-based shields for both the end-users and their proxy server. The pre-shared key is then used by a hash function to generate a Message Authentication Code (MAC) which is appended to all of the exchanged SIP packets. In this way, this approach helps to authenticate the origin of an SIP message and verify its integrity. 2. Malformed Message Detection Techniques: Defense approaches falling under this category require pre-processing the collected traffic traces to pre-define encoded patterns for different attack variants. These encoded patterns are then stored in a signature database. During the classification phase, these approaches then scan an incoming packet for the predefined patterns, and depending on whether a match is found or not, the packet is classified as anomalous (malformed) or normal respectively. The typical working of defense mechanisms belonging to this category is shown in Figure 4. In this direction, Geneiatakis et al. [54] presented a scheme that considers SIP message syntax [127] as attack signature. The syntax of different types of malformed messages is stored in a database and if syntax of a received message is similar to one of the signatures in the database, it is characterized as malformed. Ehlert et al. [47] proposed a two-level security mechanism wherein , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 17 Table 11. Approaches to Counter HTTP Flood Attack Category Research Work Defense Mechanism Strength Weakness Web Browsing Behaviour Ranjan et al. [122] Detection by comparing profiles generated during training and testing phases Can classify different attack types, detect and mitigate them Can be bypassed by control- ling packet-sending rates us- ing a large-scale botnet [136] Lee et al. [84] Detection by comparing profile based on parameters extracted from web page request sequences without considering sequence order of requested pages Provides early detection functionality and better detection rate than HsMM Does not mitigate the attack Oikonomou and Mirkovic [114] Detection using comparing request dynamics, request semantics and visual cues processing Low false positives Complex deployment proce- dure Xu et al. [167] Detection using random walk model (prediction of page request sequence) Low computational com- plexity Analyzing page request sequence may cause false alarms [84] Yatagai et al. [168] Detection by analysis of page access behaviour based on browsing sequence and correlation of browsing time and page size Can detect dynamic flood at- tack also. False alarms due to analyzing page request sequence as it might vary for different indi- viduals Xie and Yu [165, 166] Detection by classifying the benign and malicious browsing behaviour based on HsMM Provides early detection functionality False alarms due to analyzing page request sequence as it might vary for different indi- viduals Wang et al. [163] Detection by comparing surfing preferences of a be- nign user and an adversary Better detection perfor- mance as compared to other transition probability based mechanisms [121] Web page popularity is known to vary over time which may cause false alarms Singh et al. [140] Detection by finding anomalies based on request, re- sponse, popularity and repetition index using machine learning algorithms Can detect different strate- gies employed to launch the attack Web page popularity is known to vary over time which may cause false alarms Monitoring Request Attributes Chwalinski et al. [23, 24] Detection using clustering based on number of re- quests per resource per connection Can detect stealthy bots Inadequate in detecting short attack sequences Jazi et al. [77] Detecting change in proportion of HTTP requests and the network packets carrying them Low computational com- plexity Asymmetric attack may go undetected Entropy Evaluation Based Singh et al. [78] Detection using MLP-GA based on GET request count, entropy and variance Can be adapted easily to de- tect different types of flood attacks Can not mitigate the attack Singh et al. [141] Detection using MLP-GA based on GET request count and number of IP addresses Can be adapted easily to de- tect different types of flood attacks Can not mitigate the attack Challenge Based Ndibwile et al. [112] Detection using javascript pop-up dialogue box Lower false positives Complex to deploy Zhang et al. [170] Mitigation using client side physical uplink bandwidth as a challenge to identify malicious traffic Can detect and mitigate the attack Complex deployment in case of high workload environ- ment Sivabalan and Radcliffe [142] Mitigation by identifying and blocking suspicious re- quests using AYAH challenge Can detect and mitigate the attack Turnaround time of the user requests increases Suriadi et al. [146] Mitigation using Hash-based computation-bound puz- zle to identify suspicious requests Using a non-interactive challenge does not reduce user s experience Turnaround time of the user requests increases                              Fig. 4. Working of Signature based Anomaly Detection the first level check mitigates different network- and transport-layer related attacks and SIP flood attacks. In the next level, similar to the approach proposed in [54], the scheme checks for the mes- sage syntax of a received SIP packet to classify it as a normal or malformed one. In another work [83], Lahmadi and Festor proposed an approach that first analyzes the SIP exploit traffic collected beforehand to extract contextual information of an attack and subsequently use this information to block illegitimate packets after its deployment. Yu-Sung et al. [164] proposed an approach SCIDIVE , Vol. 1, No. 1, Article . Publication date: May 2021. 18 Nikhil Tripathi and Neminath Hubballi that first processes incoming packets and then decodes them into information units based on the protocol within them. The units belonging to the same session are grouped together and mapped into events. Subsequently, a rule engine matches these events against predefined rule sets [164]. If the system s aggregated event does not conform to any of the rules, SCIDIVE raises an alarm. In another work, Seo et al. [134] proposed an approach called "SIP-VoIP Anomaly Detection (SIPAD)" that makes use of a stateful SIP rule tree to identify the presence of a flooding attack. Based on the present state and the type of message, the proposed approach deduces the corresponding branches from the tree. Subsequently, it checks the structure of an SIP message by comparing it to the branches to classify the message as normal or malformed. 3. Statistical Abnormality Measurement Techniques: Statistical abnormality measurement techniques detect abnormalities in the behaviour of incoming traffic by comparing it with the predefined normal behaviour. For this comparison, different methods [50] can be put to use. In this direction, authors in [133, 148, 149] used Hellinger Distance [20] to measure the correlation between normal and anomalous traffic profile (probability distribution). This profile is comprised of different vectors that denote the occurrence probability of the different types of SIP messages in a particular time period. A similar approach was proposed in [58] which ensures that the SIP messages counts in different intervals of the testing phase do not cross a predefined threshold. Reynolds and Ghosal [125] exploited the fact that in flooding attack, the number of attempted connections is higher than the number of completed connections and thus, proposed an approach that calculates the difference between the number of completed and attempted connections. If this difference is greater than a preset threshold, attack presence is declared. Tang and Cheng [147] proposed an approach that observes the change in a wavelet s energy level to detect flood attacks. This is motivated by the fact that in event of an attack, the signal energy rises sharply even if the traffic rate rises slowly which leads to detection of the attack. Semerci et al. [132] proposed a change detection algorithm that computes the change in the SIP messaging traffic patterns at the server-side using Mahalanobis Distance [90]. If any significant change in the characteristics of messaging flows is found, the algorithm raises an alarm. In another work, Geneiatakis et al. [56] proposed an approach that monitors the "number of INVITE Requests, Responses and ACKs" [56] received in a particular time interval. If these counts are greater than a predefined threshold, the detection system raises the alarm. 4. Machine Learning Techniques: A class of defense approaches uses machine learning tech- niques as anomaly detectors to detect SIP flood attack. An abstract overview of the working of defense mechanisms belonging to this category is shown in Figure 5. In this direction, Nassar et al.                                     Fig. 5. Working of Machine Learning Techniques [111] proposed an approach that first trains a Support Vector Machine (SVM) using 38 statistical features of various message types and subsequently used the trained model to classify normal and attack traffic. Similarly, Akbar and Farooq [4] attempted to detect flood attack using Naive Bayes , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 19 and Decision Tree algorithms. Authors used different features extracted from a time window to train the machine learning algorithms. 5. SIP Connection Modeling based: Golait and Hubballi [59] proposed an approach wherein an SIP connection is modeled as a "Probabilistic Counting Deterministic Timed Automata (PCDTA)" [59]. Only if the connection conforms to PCDTA such that the probability of traversing the path from starting state to final state is greater than a predetermined threshold, the connection is declared as legitimate. Chen [22] modeled the SIP communication using Finite State Machine (FSM) and used different thresholds based on the rate of transactions and the number of allowed packets per transaction. If any of the threshold value is crossed, the detection system raises the alarm. In other works [39, 40, 87, 88], authors used Coloured Petri Nets (CPNs) to model SIP INVITE transactions and subsequently identify which states in the constructed model are vulnerable to flooding attack. Table 12 gives an overview of different categories of defense mechanisms and research works falling under each category along with their strengths and limitations. 4.2.3 Defense Mechanisms to Counter DNS Flood Attack. As shown in Figure 3, the defense mecha- nisms known to counter DNS flood attack can broadly be classified into three different categories as follows: 1. Mapping DNS Requests and Responses: The easiest way to detect DNS flood attack is to match the DNS requests received at a server to the responses sent by it. In case the number of DNS requests for which there is no corresponding response crosses a predefined threshold, it can be concluded that the server is under a flood attack and subsequently, the firewall rules can be updated to block the malicious traffic. Such an approach is presented in [80]. Similarly, Sun et al. [145] proposed an approach that mitigates DNS flood attack by correlating DNS requests and responses using a bloom filter. 2. Extension to DNS: Guo et al. [61] proposed a firewall module called DNS Guard that detects identity spoofing based DNS flood attacks. In particular, this strategy requires a DNS server to issue a distinct cookie to each client, and the client in turn associates each request it sends to the server with the previously issued cookie. Using this cookie, it can be determined if a DNS request indeed is sent from the address indicated in the packet. Zhu et al. [171] proposed an extension called T-DNS to use TLS protocol [37] for DNS communication to ensure security and privacy. 3. Changing Default Caching Behaviour of DNS Records: Ballani and Francis [9] proposed that DNS resolvers should not erase cached records even after their TTL has been expired. Instead, these stale records should be stored in a secondary cache. In an attack scenario, if a resolver does not receive a response from the authoritative nameservers of the domain under consideration, the resolver should answer the query using the information stored in the secondary cache. In another work, Pappas et al. [116] showed that the DNS protocol can be made significantly resilient against flood attack just by setting longer Time-To-Live (TTL) values for DNS infrastructure records which are used to navigate the DNS hierarchy. As a result, the infrastructure records are stored in the resolver s cache for a longer duration which can then be used to answer the query when the nameserver is under attack. Table 13 gives an overview of different categories of defense mechanisms and research works falling under each category along with their strengths and limitations. , Vol. 1, No. 1, Article . Publication date: May 2021. 20 Nikhil Tripathi and Neminath Hubballi Table 12. Approaches to Counter SIP Flood Attack Category Research Work Defense Mechanism Strength Weakness Cryptographic Techniques Arkko et al. [7] Mitigation by negotiating security mechanisms such as TLS between UA and proxy Can detect and mitigate the attack High implementation complexity Farley and Wang [49] Mitigation by verification of all exchanged SIP messages using MAC Backward compatible Requires pre-distribution of shared key Malformed Message Detection Techniques Geneiatakis et al. [54] Detection by comparing SIP message syntax to characterize malformed messages Can be adapted for other VoIP signaling protocols Can only detect pre-encoded attacks Ehlert et al. [47] Mitigation using double-level security architec- ture Can detect and mitigate the attack Can only detect pre-encoded attacks Lahmadi and Festor [83] Mitigation using Context aware prevention specifications Can automatically infer pre- vention specifications by an- alyzing captured SIP exploit traffic Can only detect pre-encoded attacks Yu-Sung et al. [164] Mitigation by stateful and cross protocol intru- sion detection architecture Can detect different DoS and media stream-based at- tacks Difficult to define an exhaustive rule- set Seo et al. [134] Detection of flooding attack using stateful SIP rule tree Can detect both flooding attack and malformed SIP messages Computational overhead due to rule tree generation Statistical Abnormality Measurement Techniques Sengar et al. [133], Tang and Cheng [148], Tang et al. [149] Anomaly detection by computing Hellinger Distance between traffic distributions Lightweight approach Can be bypassed by balancing the different types of messages during attack [59] Reynolds and Ghosal [125] Detection by computing difference between number of attempted and completed connec- tions Lightweight approach Results into higher false positives in case of flash crowd Tang et al. [147] Detection by observing change in energy of the detail signal Highly scalable Results into higher false positives in case of flash crowd Semerci et al. [132] Detection by computing difference between SIP messaging traffic patterns at the server side using Mahalanobis Distance Can detect attack and iden- tifies the attacker as well Can be bypassed by balancing the different types of messages during attack Geneiatakis et al. [56] Detection by checking check if the number of different messages is less than a predefined threshold Low implementation com- plexity Can not detect a DDoS flood launched using large number of compromised bots Machine Learning Approaches Akbar and Farooq [4] Detection based on packet-based analysis us- ing a set of spatial and temporal features No requirement of trans- forming network packet streams into traffic flows Can not detect attack if launched us- ing carefully crafted malicious SIP messages [97] Nassar et al. [111] Detection using trained SVM Low implementation com- plexity Can not detect attack if launched us- ing carefully crafted malicious SIP messages [97] Connection Modeling based Ding and Liu et al. [39] Detection by identifying of vulnerable SIP IN- VITE transaction states by analyzing CPN state space Can detect all attacks per- taining to Invite transaction Can not detect flood attack launched using other message types Liu [87] and Liu [88] Detection by modeling SIP INVITE transac- tions using CPNs over reliable and unreliable transport medium Can detect all attacks per- taining to Invite transaction Can not detect flood attack launched using other message types Ding and Su [40] Detection using Timed HCPN Can detect all attacks per- taining to Invite transaction Can not detect flood attack launched using other message types Golait and Hubballi [59] Detection by modeling SIP communication using a Probabilistic Counting Deterministic Timed Automata (PCDTA) Can detect flood attack launched at varying rate Computational overhead due to PCDTA generation Chen [22] Detection by modeling SIP communication us- ing FSM Can detect attacks irrespec- tive of the existing SIP soft- ware Ineffective against attacks launched by carefully crafting malicious SIP messages 5 COMPARING DIFFERENT APPLICATION LAYER DOS ATTACKS AND DEFENSE MECHANISMS In this section, we first present a comparative study of different application layer DoS attacks. Subsequently, we also compare the known defense mechanisms to counter the attacks based on different parameters. 5.1 Comparison of Application Layer DoS Attacks We consider the following parameters to compare different application layer DoS attacks: 1. Execution Complexity: This parameter corresponds to the complexity of executing the attack in a real network setup. The higher the execution complexity, the more difficult it is to launch the , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 21 Table 13. Approaches to Counter DNS Flood Attack Category Research Work Defense Mechanism Strength Weakness Mapping DNS Requests and Responses Kambourakis et al. [80] Mitigation by putting a threshold on DNS re- quests for which there is no corresponding response Can be easily deployed Not scalable for busy name- servers Sun et al. [145] Mitigation by correlating DNS requests and responses using Bloom filters Can be easily deployed Ineffective if the adversary and victim nameserver are using the same ISP Extension to DNS Guo et al. [61] Detection of spoofed DNS requests by associ- ating each request originator with a unique cookie Does not require modifying DNS protocol Ineffective if attack is launched using multiple computers without spoofing the source IP address Zhu et al. [171] Mitigation by using DNS over TLS Low memory requirement for im- plementation Provides attack surface for connection-oriented DoS at- tacks [121] Changing Default Caching Behaviour of DNS Records Ballani and Francis [9] Mitigation by proposing a use of secondary stale cache Can detect and mitigate the attack High implementation com- plexity Pappas et al. [116] Mitigation by setting longer TTL values for DNS infrastructure records Operationally feasible and imme- diately deployable even by large zones Makes harder for operators to update their records [9] attack and vice versa. The execution complexity of launching an attack depends on factors such as the requirement of escalated privileges (e.g. Man-in-The-Middle position), and resource consump- tion (e.g. bandwidth) of the malicious client. The attack execution complexity also increases if the malicious client has to fulfill complex requirements such as the exploitation of IP fragmentation policies of the underlying operating system. 2. Target: This parameter refers to the entity that is targeted during an application layer DoS attack. The targeted entity can be either an individual client or a server. For example, a malicious client targets NTP clients individually while launching DoS attacks against NTP. However, in other application layer DoS attacks that we discussed, the malicious client targets a server to prevent it from serving the incoming requests. 3. Traffic Overhead: This parameter refers to the quantum of traffic that a malicious client sends to a target (either to a victim client or to a server). If the malicious client targets the victim clients individually (e.g. in case of DoS attacks against NTP), this parameter refers to the traffic sent to prevent one victim client from accessing the service. On the other hand, if the malicious client targets a server as a whole, this parameter refers to the traffic sent to prevent the server from serving any incoming request. It is to be noted that this parameter is applicable for comparing the attacks falling under the same category only. This is because the different categories of DoS attacks target different entities (either individual clients or servers) and thus, they should not be compared solely based on this parameter. 4. Stealthiness: If a malicious client needs to send a large number of specially crafted abnormal requests to launch an application layer DoS attack, the chances of the attack detection by a DoS detection/mitigation scheme may increase. Thus, from the malicious client s perspective, launching an attack should involve sending minimum number of such requests to keep the traffic generation bar as low as possible. If the traffic generated due to launching an attack is high, we consider the attack as less stealthy. 5. Relevance: Some of the DoS attacks are relevant within a Local Area Network (LAN) only as the scope of the application layer protocols they target is restricted within LAN. On the other hand, some of the DoS attacks target popular application layer protocols being used on the Internet and thus, are relevant to the Internet. We used this parameter to differentiate the attacks relevant to either LAN or the Internet. 6. Spoofing?: To launch some of the application layer DoS attacks, a malicious client needs the ability to spoof the identity of the involved entities (client/server). Identity spoofing can be in the form of either MAC address spoofing or IP address spoofing. , Vol. 1, No. 1, Article . Publication date: May 2021. 22 Nikhil Tripathi and Neminath Hubballi 7. Real Incidents?: We use this parameter to differentiate the application layer DoS attacks based on whether there have been real incidents on the Internet where commercial security solution providers observed these attacks. 8. Attack Type: Depending on the number of devices required to create a DoS scenario against a target, we classify the discussed attacks as belonging to either DoS or DDoS. If a malicious client requires several devices to launch an application layer DoS attack, the attack is considered a DDoS attack. On the other hand, if the malicious client requires only one device to launch an attack, the attack is considered a DoS attack. 9. DDoS-for-hire Applicable?: With the unfolding of DDoS-for-hire services, also known as booters [79], the bar for launching DDoS attacks has significantly lowered. For a very nominal cost, these services sell to an adversary access to a large number of malware-infected devices. Subsequently, the adversary uses these devices to launch DDoS attacks against a victim. Though these services provide the adversary resources to launch DDoS attacks, they are not required to launch simple DoS attacks wherein the adversary just needs only one device. Based on these parameters, the comparison of different application layer DoS attacks is shown in Table 14. The following observations can be made from this table: Table 14. Comparison of Application Layer DoS Attacks Attack Category Specific Attack Comp- lexity Target Overhead Steal- thiness Relevance Spoof- ing? Real In- cidents? Attack Type Booters Applicable? Attacks against DHCP Induced Starvation Low Server Low High LAN Yes Yes DoS No Classical Starvation High Server High Rela- tively Low LAN Yes Yes DoS No Attacks against NTP Deja Vu High Individual Clients High Low Internet Yes No DoS No On-path Timeshifting High Individual Clients Minimal Very High Internet Yes No DoS No DoS by Spoofed Kiss-o -Death Low Individual Clients Minimal Very High Internet Yes No DoS No DoS by Bad Authentication Low Individual Clients Minimal Very High Internet Yes No DoS No Interleaved-Pivot Attack Low Individual Clients Minimal Very High Internet Yes No DoS No Pinning to bad timekeepers Low Individual Clients Low High Internet Yes No DoS No Fragmentation attack High Individual Clients High Low Internet Yes No DoS No Slow HTTP DoS Slow Header Low Server Low High Internet No Yes DoS No Slow Message Body Low Server Low High Internet No Yes DoS No Slow Read Low Server Low High Internet No Yes DoS No HTTP Pragma Low Server Low High Internet No Yes DoS No Slow Rate Generic DoS SlowReq Low Server Low High Internet No No DoS No Slowcomm Low Server Low High Internet No No DoS No Slow Next Low Server Low Very High Internet No No DoS No SlowDrop Low Server Low Very High Internet No No DoS No Request Flood HTTP Flood High Server Very High High Internet No Yes DDoS Yes SIP Flood High Server Very High High Internet No Yes DDoS Yes DNS Flood High Server Very High High Internet No Yes DDoS Yes 1. The complexity of the classical DHCP starvation attack is high as it requires sending multiple bogus requests using random MAC addresses. Moreover, the complexity of DoS attacks against NTP such as Deja Vu and On-path Timeshifting is high as they require the malicious client to obtain a privileged position between the victim client and the NTP server. The complexity of fragmentation- based off-path timeshifting attack against NTP is high because it requires the exploitation of IP fragmentation policies which is a cumbersome process. The complexity of request flood attacks is high as they require sending a large number of requests to the target server. 2. Launching an Induced DHCP starvation attack involves sending only spoofed probe replies and thus, requires less traffic overhead as compared to a classical DHCP starvation attack. This also , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 23 makes the Induced DHCP starvation stealthier than the classical DHCP starvation attack. Also, since launching a Deja Vu attack requires sending a sequence of packets over and over, it results in relatively higher traffic overhead and thus, is less stealthy as compared to other attacks against NTP. Moreover, the on-path timeshifting and the off-path DoS attacks (excluding the attack proposed in [156]) against NTP require sending a very small number of spoofed NTP packets to prevent a victim client from synchronizing its clock. Thus, these attacks require the least amount of traffic and are highly stealthy. However, the fragmentation-based off-path timeshifting attack requires sending several IP fragments to exploit the IP fragmentation policy which results in high traffic overhead. This makes the attack less stealthy. From the table, we can also notice that launching the Slow HTTP DoS and Slow Rate generic DoS attacks generates less traffic overhead and thus, are stealthier in nature. Moreover, Slow Next and SlowDrop are stealthier than other attacks belonging to this category as they require sending benign requests instead of incomplete requests at a slow rate. Launching request flood attacks require sending a large number of legitimate requests from several devices due to which they generate very high traffic overhead. However, it is difficult to differentiate these attacks from scenarios such as flash crowd [11] as these attacks involve sending legitimate requests. This makes these attacks stealthier in nature. 3. Out of all the application layer DoS attacks discussed in this paper, only DHCP starvation attacks are limited to local networks. All other attacks are relevant over the Internet and thus, can target a large number of victims. 4. As discussed earlier in Section 1, 53 % of the organizations confirmed insider attacks against them [150]. Thus, we presume that there may have been incidents of DHCP starvation attacks as well. The incidents of Slow HTTP DoS and HTTP flood attacks on the Internet have also been reported in the past [21, 53, 72, 85, 101]. 5. Since the request flood attacks require sending a large number of requests to the target server, an adversary can make use of services like booters [79] to send the request flood from a large number of devices. Due to this reason, these attacks fall under the DDoS category. Moreover, DDoS-for-hire services are also applicable to these application layer DDoS attacks. 5.2 Comparison of Defense Mechanisms We compare defense mechanisms known to counter various application layer DoS attacks based on the following parameters [108]: 1. Proactive or Reactive?: We use this parameter to differentiate the defense mechanisms based on whether they defend attacks by proactively preventing them from occurring or they only react to the ongoing attacks. 2. Holistic Defense?: We use this parameter to differentiate the defense mechanisms based on whether they can mitigate the DoS attacks or they can only detect the attacks. 3. Implementation Complexity: The deployment of defense mechanisms should be easy and feasible to implement. We use this parameter to compare different defense mechanisms based on their implementation complexity. 4. Scalability: We use this parameter to differentiate the defense mechanisms based on whether they can be effective to counter the DoS attacks even if the number of adversaries and the amount of attack traffic increase. Based on these parameters, the comparison of the defense mechanisms is shown in Table 15. The following observations can be made from this table: 1. The defense mechanisms belonging to the "Cryptographic Techniques" category involve high implementation complexity. This is because of the involvement of third-party modules (e.g. authen- tication server), and the requirement of cumbersome key distribution mechanism, etc. Moreover, the , Vol. 1, No. 1, Article . Publication date: May 2021. 24 Nikhil Tripathi and Neminath Hubballi Table 15. Comparison of Defense Mechanisms to counter Different Attacks Countering Category Proactive or Reactive? Holistic Defense? Implementation Complexity Scala- bility Attacks against DHCP Cryptographic Techniques Proactive Yes High High Security Features in Switches Proactive Yes Low High Using DHCP Relay Agent Proactive Yes Low High DHCP Traffic Profiling Reactive No Low High Machine Learning based Reactive No Low High Attacks against NTP Cryptographic Techniques Proactive Yes High High Path Redundancy Proactive Yes Low High Server Redundancy Proactive Yes High High Slow HTTP DoS Implementation Modules Proactive Yes Low High Comparing Traffic Profiles Reactive No Low High Monitoring Traffic Features Reactive Yes Low High Slow Rate Generic DoS Monitoring Traffic Features Reactive Yes Low High Request Flood HTTP Flood Web Browsing Behaviour Reactive No Low High Monitoring Request Attributes Reactive No Low High Entropy Evaluation Based Reactive No Low High Challenge Based Proactive Yes (excluding [112]) High Low SIP Flood Cryptographic Techniques Proactive Yes High High Malformed Message Detection Techniques Proactive Yes (excluding [54], [134]) Low High Statistical Abnormality Measurement Techniques Reactive No Low High Machine Learning Techniques Reactive No Low High SIP Connection Modeling based Reactive No Low High DNS Flood Mapping DNS Requests and Responses Proactive Yes Low High Extension to DNS Proactive Yes (excluding [61]) Low High Changing Default Caching Behaviour of DNS Records Proactive Yes High High implementation of defense mechanisms belonging to the "Server Redundancy" category involves high complexity. This is because these defense mechanisms require modification at the client-side to overcome compatibility issues. The implementation complexity of challenge-based defense mech- anisms to counter HTTP flood attacks is high because they require the implementation overhead of third party modules like CAPTCHA generation and verification servers. Since these servers are also a potential target of a DoS attack, securing them again causes extra implementation overhead. The implementation complexity of defense mechanisms that involve changing default DNS caching behaviour to counter DNS flood attacks is high because they require modifications in the protocol operation itself. 2. The scalability of the defense mechanisms belonging to the "Challenge-Based" category is low. This is because, in case of a large-scale attack, the adversaries can target the challenge providing service and prevent legitimate clients from obtaining the challenge. 6 COMMERCIAL SECURITY PRODUCTS TO COMBAT APPLICATION LAYER DOS ATTACKS Since application layer DoS attacks are one of the major security threats today and considering their scale observed in recent incidents (discussed earlier in Section 1), the market of commercial DoS mitigation products has seen a sharp growth in the recent few years [75]. Major players in this field have kept updating their security products with different features such as higher attack handling capacity, ability to mitigate a wide variety of DoS attacks, adding multiple layers of security, etc. to compete with other vendors. In this section, we show a comparison of some of the popular commercial DoS mitigation products (as per [48, 94]) in terms of their abilities to counter different DoS attacks. For this comparative study, we do not consider DHCP starvation attacks since they are limited to local networks only. The features that should exist in the commercial security products to mitigate the considered attacks are discussed in the next few subsections. 1. Detection of Spoofed IP Packets: As discussed earlier in Section 3.2.5, an adversary is required , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 25 to send spoofed IP packets to NTP hosts to launch NTP Timeshifting/Timesticking DoS attacks. Thus, to detect these attacks, a security product must be able to detect packets that disguise their origin IP address. Once detected, the spoofed IP packets must be immediately dropped by the secu- rity product before forwarding it to the end entity like an NTP host. If the security product can not detect spoofed IP packets, it will not be able to detect and mitigate NTP Timeshifting/Timesticking DoS attacks. 2. Analysis of Incoming Requests: To detect attacks such as Slowloris and SlowReq that require sending incomplete requests, a security product must be able to analyze incoming requests using techniques such as Deep Packet Inspection (DPI) [52, 65 67]. If the security product finds a request incomplete, it should drop the request instead of forwarding it to the target server. For such analy- sis, the commercial security products are usually equipped with reverse proxy modules that are deployed in front of the target servers [99]. 3. Monitoring Incoming Traffic Rate: The commercial security products should monitor the incoming traffic rate for their customers so that in an event of a massive DDoS attack, the traffic destined for an IP address range belonging to the customer is redirected to the security provider s data centres. At these data centres, the attack traffic is first cleaned and subsequently, the clean traffic is then forwarded to the customer s IP address range. This mechanism is usually initiated when the traffic rate goes beyond a dynamic threshold determined automatically using past traffic behaviour. 4. Monitoring Connection Features and Analyzing Client s Behaviour: It is essential for a commercial security product to monitor the connection features (e.g. persistent connection) of the underlying transport layer protocol. This is because the malicious client exploits the persistent connection feature of TCP to launch Slow Next and SlowDrop attacks as discussed earlier in Section 4.1. Moreover, the commercial security product should also analyze how a client behaves on receiving a response from the server. This is because even if a malicious client sends a legitimate request to the server, it may behave as an unreliable client by simply dropping the response packets from the server and then sending the same request to the target server repeatedly. The malicious client uses this behaviour while launching the SlowDrop attack as discussed earlier in Section 4.1. Based on these features, we compare the ability of various commercial security products to detect the considered attacks in Table 16. From the comparison, we can notice that almost every security product can mitigate request flood attacks as most of them can monitor the incoming traffic rate. We can also notice that very few products can counter NTP timeshifting/timesticking attacks. This is because most of the security products can not detect spoofed IP packets that are sent while launching NTP timeshifting/timesticking DoS attacks. Table 16. Comparison of Commercial DoS Solutions Product Name Vendor NTP Timeshifting/ Timesticking Attacks Slow HTTP DoS Request Flood Slow Rate Imperva Incapsula Imperva (only SlowReq) DOSarrest DOSarrest (only SlowReq) F5 F5 Networks (only SlowReq) Kona Site Defender Akamai 2 (only SlowReq) AppWall Radware (only SlowReq) Availability Protection System (APS) Arbor Networks Nexusguard Nexusguard Athena Verisign Cloudflare-rate limit Cloudflare SiteProtect NG Neustar Sucuri DDoS Protection Sucuri (only SlowReq) Azure DDoS Protection Microsoft (only SlowReq) Project Shield3 Google AWS Shield Advanced Amazon (only SlowReq) IBM Cloud DDoS IBM (only SlowReq) , Vol. 1, No. 1, Article . Publication date: May 2021. 26 Nikhil Tripathi and Neminath Hubballi 7 CONCLUSION AND FUTURE RESEARCH DIRECTIONS With this survey, we presented a structured and comprehensive review of application layer DoS attacks and defense mechanisms. We discussed the execution method of different attacks, tools known to launch them, and compared them based on different parameters. We also reviewed various state-of-the-art defense mechanisms and commercial DoS mitigation products known to counter dif- ferent application layer DoS attacks and discussed their strengths and weaknesses. As evident from the existing literature, several application layer DoS attacks have been proposed against protocols such as DHCP, NTP, HTTP/1.1, HTTP/2, DNS, and SIP especially in the last decade, and the tools and techniques used to launch these attacks are continuously evolving with time. We believe that the presented survey will motivate researchers to scrutinize different application layer protocols in order to find potential vulnerabilities in them and build robust and effective defense mechanisms to counter any resulting attack. In this section, we discuss some promising future research di- rections so that the research community can get an insight into the existing research gap in this field. Slow Rate DoS and Request Flood Attacks against Connection-oriented Protocols: It would be interesting to study the effect of Slow Rate DoS attacks and request flood attacks against connection-oriented (TCP-based) protocols. For example, these attacks should be tested against connection-oriented application layer protocols such as File Transfer Protocol (FTP) [120], Simple Mail Transfer Protocol (SMTP) [82], Internet Message Access Protocol (IMAP) [29], etc. Though it is believed that most of the connection-oriented protocols are vulnerable against Slow Rate DoS attacks [17], there is no such comprehensive work that covers this study. Application Layer DoS Attacks in context of Internet of Things (IoT): The inception of Internet of Things (IoT) as a result of the fourth industrial revolution (Industry 4.0) has provided hackers in various underground communities unlimited interconnected resources with several security flaws. These hackers have already been able to successfully exploit these resources so that they can be misused for nefarious purposes such as the staging of a DoS attack. Also, there have been few incidents in the past where IoT devices were used to launch DoS attacks [13, 123]. Thus, we believe that it is necessary to conduct a study on the different IoT devices accessible on the Internet and testing if they can be exploited to launch different types of flooding-based application layer DoS attacks. Another interesting study would be to analyze by what factor the effect of each application layer DoS attack on a target victim can be magnified if the vulnerable IoT devices are put into use. Vulnerability Analysis of Different Implementations of Application Layer Protocols: Dif- ferent software implementations of application layer protocols sometimes behave differently while processing an abnormal event because of the configuration parameters which are specific to the implementation. For instance, Apache and IIS HTTP servers behave differently on receiving an incomplete GET request due to which Apache is vulnerable to Slow Header attack while IIS is not [157]. Thus, we believe that it would be interesting to test different implementations of other application layer protocols against known vulnerabilities. Also, a study can be conducted to check how widely the vulnerable implementations are currently being used on the Internet to measure the overall attack surface. 2Customers are provided with the option of defining rules using an API interface to accept or reject particular request types. 3This free service is available only for news, human rights, or elections monitoring organizations and individual journalists. , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 27 Development of Automated Attack Launching Tools: There are a plethora of tools avail- able to launch classical DHCP starvation, Slow HTTP DoS, and request flood attacks. However, there are no automated tools available for launching Induced DHCP starvation, NTP DoS attacks, and Slow Rate generic DoS attacks. Thus, automated tools can be developed to launch the attacks for which there are no available tools. Developing an automated tool helps in the long run as it is useful while testing different implementations of an application layer protocol and measuring attack surface on the Internet. Another good alternate option to develop an automated tool for each attack type is to build utilities that can be integrated into popular penetration testing frameworks such as Armitage [30] and Metasploit [98]. REFERENCES [1] Erwin Adi, Zubair A. Baig, Philip Hingston, and Chiou-Peng Lam. 2016. Distributed Denial-of-Service Attacks against HTTP/2 Services. Cluster Computing 19, 1 (2016), 79 86. [2] Maurizio Aiello, Enrico Cambiaso, Maurizio Mongelli, and Gianluca Papaleo. 2014. An On-line Intrusion Detection Approach to Identify Low-rate DoS Attacks. In Proceedings of the International Carnahan Conference on Security Technology (ICCST 14). 1 6. [3] Maurizio Aiello, Gianluca Papaleo, and Enrico Cambiaso. 2014. SlowReq: A Weapon for Cyberwarfare Operations. Characteristics, Limits, Performance, Remediations. In Proceedings of the International Joint Conferences SOCO 13- CISIS 13-ICEUTE 13. 537 546. [4] Muhammad Ali Akbar and Muddassar Farooq. 2014. Securing SIP-based VoIP Infrastructure Against Flooding Attacks and Spam Over IP Telephony. Knowledge and Information Systems 38, 2 (2014), 491 510. [5] Oscar Andersson. 2013. Slowloris. https://github.com/Ogglas/Orignal-Slowloris-HTTP-DoS/blob/master/slowloris.pl. [6] Sebastian Anthony. 2015. GitHub battles Largest DDoS in Site s History, targeted at Anti-Censorship Tools. https://arstechnica.com/information-technology/2015/03/github-battles-largest-ddos-in-sites-history-targeted- at-anti-censorship-tools/. [7] Jari Arkko, Gonzalo Camarillo, Tao Haukka, and Vesa Torvinen. 2003. (RFC 3329) Security Mechanism Agreement for the Session Initiation Protocol (SIP). https://tools.ietf.org/html/rfc3329. [8] India Ashok. 2016. Hackers leave Finnish Residents Cold After DDoS Attack Knocks Out Heating Sys- tems. https://www.ibtimes.co.uk/hackers-leave-finnish-residents-cold-after-ddos-attack-knocks-out-heating-systems- 1590639. [9] Hitesh Ballani and Paul Francis. 2008. Mitigating DNS DoS Attacks. In Proceedings of the ACM conference on Computer and Communications Security (CCS 08). 189 198. [10] Bradley Barth. 2017. DDoS attacks delay trains, halt transportation services in Sweden. https://www.scmagazineuk.com/ddos-attacks-delay-trains-halt-transportation-services-sweden/article/1473963. [11] Sajal Bhatia, George Mohay, Alan Tickle, and Ejaz Ahmed. 2011. Parametric Differences Between a Real-world Distributed Denial-of-Service Attack and a Flash Event. In Proceedings of the International Conference on Availability, Reliability and Security (ARES 11). 210 217. [12] Monowar H. Bhuyan, Hirak Kashyap, Dhruba Kumar Bhattacharyya, and Jugal K. Kalita. 2014. Detecting Distributed Denial of Service Attacks: Methods, Tools and Future Directions. Comput. J. 57, 4 (2014), 537 556. [13] Security Boulevard. 2018. New DemonBot Discovered. https://securityboulevard.com/2018/10/new-demonbot- discovered/. [14] Randy Bush and Rob Austein. 2013. (RFC 6810) The Resource Public Key Infrastructure (RPKI) to Router Protocol. https://tools.ietf.org/html/rfc6810. [15] Enrico Cambiaso, Gianluca Papaleo, and Maurizio Aiello. 2014. Slowdroid: Turning a Smartphone into a Mobile Attack Vector. In Proceedings of the International Conference on Future Internet of Things and Cloud (FITC 14). 405 410. [16] Enrico Cambiaso, Gianluca Papaleo, and Maurizio Aiello. 2017. Slowcomm: Design, Development and Performance Evaluation of a New Slow DoS Attack. Journal of Information Security and Applications 35 (2017), 23 31. [17] Enrico Cambiaso, Gianluca Papaleo, Giovanni Chiola, and Maurizio Aiello. 2013. Slow DoS Attacks: Definition and Categorisation. International Journal of Trust Management in Computing and Communications 1, 3-4 (2013), 300 319. [18] Enrico Cambiaso, Gianluca Papaleo, Giovanni Chiola, and Maurizio Aiello. 2015. Designing and Modeling the Slow Next DoS Attack. In Proceedings of the International Joint Conference on Computational Intelligence in Security for Information Systems Conference (CISIS 15). 249 259. [19] Giovanni Chiola Cambiaso, Enrico and Maurizio Aiello. 2019. Introducing the SlowDrop Attack. Computer Networks 150 (2019), 234 249. [20] Xiaofan Cao. 2007. Model Selection Based on Expected Squared Hellinger Distance. Colorado State University. , Vol. 1, No. 1, Article . Publication date: May 2021. 28 Nikhil Tripathi and Neminath Hubballi [21] Jo o Marcelo Ceron, Klaus Steding-Jessen, and Cristine Hoepers. 2012. Anatomy of SIP Attacks. ; login:: The Magazine of USENIX & SAGE 37, 6 (2012), 25 32. [22] Eric Y. Chen. 2006. Detecting DoS attacks on SIP systems. In Proceedings of the Workshop on VoIP Management and Security (VOIPMS 06). 53 58. [23] Pawel Chwalinski, Roman Belavkin, and Xiaochun Cheng. 2013. Detection of Application Layer DDoS Attack with Clustering and Likelihood Analysis. In Proceedings of the GLOBECOM Workshops (GC Wkshps 13). 217 222. [24] Pawel Chwalinski, Roman Belavkin, and Xiaochun Cheng. 2013. Detection of Application Layer DDoS Attacks with Clustering and Bayes Factors. In Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics (SMC 13). 156 161. [25] Cisco. 2013. Dynamic ARP Inspection. http://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst6500/ios/12- 2SX/configuration/guide/book/dynarp.html. [26] Cisco. 2013. Port Security. http://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst6500/ios/12- 2SX/configuration/guide/book/port_sec.html. [27] Lucian Constantin. 2012. DDoS Attacks Against US Banks Peaked At 60 Gbps. https://www.cio.com/article/2389721/ddos-attacks-against-us-banks-peaked-at-60-gbps.html. [28] Core. 2019. https://httpd.apache.org/docs/2.4/mod/core.html. [29] Mark R. Crispin. 2003. (RFC 3501) Internet Message Access Protocol - Version 4rev1. https://tools.ietf.org/html/rfc3501. [30] Cyber Attack Management for Metasploit. 2013. https://github.com/rsmudge/armitage. [31] Kaspersky Daily. 2016. How to not break the Internet. https://www.kaspersky.com/blog/attack-on-dyn- explained/13325/. [32] Yuri Gil Dantas, Vivek Nigam, and Iguatemi E. Fonseca. 2014. A Selective Defense for Application Layer DDoS Attacks. In Proceedings of the Joint Intelligence and Security Informatics Conference (JISIC 14). 75 82. [33] Kathryn de Graaf, John Liddy, Paul Raison, John C. Scano, and Sanjay Wadhwa. 2013. Dynamic Host Configura- tion Protocol (DHCP) Authentication using Challenge Handshake Authentication Protocol (CHAP). Patent No. US8555347B2, Issued Oct. 8th., 2013. [34] Jacques Demerjian and Ahmed Serhrouchni. 2004. DHCP Authentication using Certificates. In Proceedings of Security and Protection in Information Processing Systems (IFIP 04). 456 472. [35] Omer Deutsch, Neta Rozen Schiff, Danny Dolev, and Michael Schapira. 2018. Preventing (Network) Time Travel with Chronos. In Proceedings of the Network and Distributed System Security Symposium (NDSS 18). 1 15. [36] DHCPIG. 2017. https://github.com/kamorin/DHCPig. [37] Tim Dierks and Christopher Allen. 1999. (RFC 2246) The TLS Protocol Version 1.0. https://tools.ietf.org/html/rfc2246. [38] Christoph Dietzel, Georgios Smaragdakis, Matthias Wichtlhuber, and Anja Feldmann. 2018. Stellar: Network Attack Mitigation using Advanced Blackholing. In Proceedings of the International Conference on emerging Networking EXperiments and Technologies (CoNEXT 18). 152 164. [39] Lay G. Ding and Lin Liu. 2008. Modelling and Analysis of the INVITE Transaction of the Session Initiation Protocol using Coloured Petri Nets. In Proceedings of the International Conference on Applications and Theory of Petri Nets (ATPN 08). 132 151. [40] Yanlan Ding and Guiping Su. 2007. Intrusion Detection System for Signal based SIP Attacks through Timed HCPN. In Proceedings of the International Conference on Availability, Reliability and Security (ARES 07). 190 197. [41] dns-flood-ng. 2017. https://github.com/cmosek/dns-flood-ng. [42] Christos Douligeris and Aikaterini Mitrokotsa. 2004. DDoS Attacks and Defense Mechanisms: classification and state-of-the-art. Computer Networks 44, 5 (2004), 643 666. [43] Benjamin Dowling, Douglas Stebila, and Greg Zaverucha. 2016. Authenticated Network Time Synchronization. In Proceedings of the USENIX Security Symposium (USENIX Security 16). 823 840. [44] Ralph Droms. 1997. (RFC 2131) Dynamic Host Configuration Protocol. https://tools.ietf.org/html/rfc2131. [45] Surakarn Duangphasuk, Supakorn Kungpisdan, and Sumeena Hankla. 2011. Design and Implementation of Improved Security Protocols for DHCP using Digital Certificates. In Proceedings of the International Conference on Networks (ICN 11). 287 292. [46] Sven Ehlert, Dimitris Geneiatakis, and Thomas Magedanz. 2010. Survey of Network Security Systems to Counter SIP-based Denial-of-Service Attacks. Computers & Security 29, 2 (2010), 225 243. [47] Sven Ehlert, Ge Zhang, Dimitris Geneiatakis, Georgios Kambourakis, Tasos Dagiuklas, Jiri Markl, and Dorgham Sisalem. 2008. Two Layer Denial of Service Prevention on SIP VoIP Infrastructures. Computer Communications 31, 10 (2008), 2443 2456. [48] eSecurity Planet. 2018. Top 10 Distributed Denial of Service (DDoS) Protection Vendors. https://www.esecurityplanet.com/products/top-ddos-vendors.html. [49] Ryan Farley and Xinyuan Wang. 2012. VoIP Shield: A Transparent Protection of Deployed VoIP Systems from SIP-based Exploits. In Proceedings of the International Conference on Network Operations and Management Symposium , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 29 (NOMS 12). 486 489. [50] Laura Feinstein, Dan Schnackenberg, Ravindra Balupari, and Darrell Kindred. 2003. Statistical Approaches to DDoS Attack Detection and Response. In Proceedings of the DARPA Information Survivability Conference & Exposition (DISCEX 03). 303 314. [51] Roy T. Fielding, James Gettys, Jeffrey C. Mogul, Larry Masinter, Paul J. Leach, and Tim Berners-Lee. 1999. (RFC 2616) Hypertext Transfer Protocol HTTP/1.1. https://tools.ietf.org/html/rfc2616. [52] Michael Finsterbusch, Chris Richter, Eduardo Rocha, Jean-Alexander Muller, and Klaus Hanssgen. 2013. A Survey of Payload-based Traffic Classification Approaches. IEEE Communications Surveys & Tutorials 16, 2 (2013), 1135 1156. [53] Forbes. 2014. The Largest Cyber Attack In History Has Been Hitting Hong Kong Sites. https://www.forbes.com/sites/parmyolson/2014/11/20/the-largest-cyber-attack-in-history-has-been-hitting- hong-kong-sites/. [54] Dimitris Geneiatakis, Georgios Kambourakis, Costas Lambrinoudakis, Tasos Dagiuklas, and Stefanos Gritzalis. 2007. A Framework for Protecting a SIP-based Infrastructure against Malformed Message Attacks. Computer Networks 51, 10 (2007), 2580 2593. [55] Dimitris Geneiatakis, abd Georgios Kambourakis Tasos Dagiuklas, Costas Lambrinoudakis, Stefanos Gritzalis, Karlovassi Sven Ehlert, and Dorgham Sisalem. 2006. Survey of Security Vulnerabilities in Session Initiation Protocol. IEEE Communications Surveys & Tutorials 8, 3 (2006), 68 81. [56] Dimitris Geneiatakis, Nikos Vrakas, and Costas Lambrinoudakis. 2009. Utilizing Bloom Filters for Detecting Flooding Attacks against SIP based Services. Computers & Security 28, 7 (2009), 578 591. [57] Gobbler. 2003. http://gobbler.sourceforge.net/. [58] Diksha Golait and Neminath Hubballi. 2016. VoIPFD: Voice over IP Flooding Detection. In Proceedings of the National Conference on Communication (NCC 16). 1 6. [59] Diksha Golait and Neminath Hubballi. 2017. Detecting Anomalous Behavior in VoIP Systems: A Discrete Event System Modeling. IEEE Transactions on Information Forensics and Security 12, 3 (2017), 730 745. [60] Gonzalez, Hugo and Gosselin-Lavigne, Marc Antoine and Stakhanova, Natalia and Ghorbani, Ali A. 2014. The Impact of Application-Layer Denial-of-Service Attacks. Case Studies in Secure Computing: Achievements and Trends 261 (2014). [61] Fanglu Guo, Jiawu Chen, and Tzi cker Chiueh. 2006. Spoof Detection for Preventing DoS Attacks against DNS Servers. In Proceedings of the International Conference on Distributed Computing Systems (ICDCS 06). 37 44. [62] M. Handley, H. Schulzrinne, E. Schooler, and J. Rosenberg. 1999. (RFC 2543) SIP: Session Initiation Protocol. https://tools.ietf.org/html/rfc2543. [63] HTTP Unbearable Load King. 2018. https://github.com/grafov/hulk. [64] CS Hub. 2018. Incident Of The Week: DDoS Attack Hits 3 Banks Simultaneously. https://www.cshub.com/attacks/news/incident-of-the-week-ddos-attack-hits-3-banks. [65] Neminath Hubballi and Mayank Swarnkar. 2017. BitCoding: Protocol Type Agnostic Robust Bit Level Signatures for Traffic Classification. In Proceedings of the Global Communications Conference (GLOBECOMM 17). 1 6. [66] Neminath Hubballi and Mayank Swarnkar. 2018. : Network Traffic Classification Through Encoded Bit Level Signatures. IEEE/ACM Transactions on Networking 26, 5 (2018), 2334 2346. [67] Neminath Hubballi, Mayank Swarnkar, and Mauro Conti. 2020. BitProb: Probabilistic Bit Signatures for Accurate Application Identification. IEEE Transactions on Network and Service Management 17, 3 (2020), 1730 1741. [68] Neminath Hubballi and Nikhil Tripathi. 2017. A Closer Look into DHCP Starvation Attack in Wireless Networks. Computers & Security 65, C (2017), 387 404. [69] Neminath Hubballi and Nikhil Tripathi. 2017. An Event based Technique for Detecting Spoofed IP Packets. Journal of Information Security and Applications 35 (2017), 32 43. [70] Intesab Hussain, Soufiene Djahel, Zonghua Zhang, and Farid Nait-Abdesselam. 2015. A Comprehensive Study of Flooding Attack Consequences and Countermeasures in Session Initiation Protocol SIP. Security and Communication Networks 8, 18 (2015), 4436 4451. [71] Imperva. 2017. Global DDoS Threat Landscape Quarter 4. https://www.incapsula.com/ddos-report/ddos-report-q4- 2017.html. [72] Imperva. 2017. Slowloris. https://www.imperva.com/learn/application-security/slowloris/. [73] Imperva. 2019. 2019 Global DDoS Threat Landscape Report. https://www.imperva.com/blog/2019-global-ddos-threat- landscape-report/. [74] Qualys Inc. 2012. Are You Ready for Slow Reading? https://blog.qualys.com/securitylabs/2012/01/05/slow-read. [75] Mordor Intelligence. 2020. DDoS Protection Market - Growth, Trends, COVID-19 Impact, And Forecasts (2021 - 2026). https://www.mordorintelligence.com/industry-reports/ddos-protection-market. [76] inviteflood. 2006. https://tools.kali.org/sniffingspoofing/inviteflood. , Vol. 1, No. 1, Article . Publication date: May 2021. 30 Nikhil Tripathi and Neminath Hubballi [77] Hossein Hadian Jazi, Hugo Gonzalez, Natalia Stakhanova, and Ali A. Ghorbani. 2017. Detecting HTTP-based Application Layer DoS Attacks on Web Servers in the Presence of Sampling. Computer Networks 121 (2017), 25 36. [78] Khundrakpam Johnson Singh, Khelchandra Thongam, and Tanmay De. 2016. Entropy-based Application Layer DDoS Attack Detection Using Artificial Neural Networks. Entropy 18, 10 (2016), 1 17. [79] Rick Hofstede Anna Sperotto Mark Wierbosch Lisandro Zambenedetti Granville Aiko Pras Jos Jair Santanna, Roland van Rijswijk-Deij. 2015. Booters An Analysis of DDoS-as-a-service Attacks. In Proceedings of the IFIP/IEEE International Symposium on Integrated Network Management (IM 15). 243 251. [80] Georgios Kambourakis, Tassos Moschos, Dimitris Geneiatakis, and Stefanos Gritzalis. 2007. Detecting DNS Amplifi- cation Attacks. In Proceedings of the International Workshop on Critical Information Infrastructures Security (CRITIS 07). 185 196. [81] Angelos D. Keromytis. 2012. A Comprehensive Survey of Voice over IP Security Research. IEEE Communications Surveys and Tutorials 14, 2 (2012), 514 537. [82] John C. Klensin. 2008. (RFC 5321) Simple Mail Transfer Protocol. https://tools.ietf.org/html/rfc5321. [83] Abdelkader Lahmadi and Olivier Festor. 2012. A Framework for Automated Exploit Prevention from Known Vulnerabilities in Voice over IP Services. IEEE Transactions on Network and Service Management 9, 2 (2012), 114 127. [84] Sangjae Lee, Gisung Kim, and Sehun Kim. 2011. Sequence-order-independent Network Profiling for Detecting Application Layer DDoS Attacks. EURASIP Journal on Wireless Communications and Networking 2011, 1 (2011), 50. [85] Dave Lewis. 2017. The DDoS Attack Against Dyn One Year Later. https://www.forbes.com/sites/davelewis/2017/10/23/the-ddos-attack-against-dyn-one-year-later/. [86] Allan Liska. 2016. NTP Security: A Quick-Start Guide. Apress. [87] Lin Liu. 2009. Verification of the SIP Transaction using Coloured Petri Nets. In Proceedings of the Australasian Conference on Computer Science (ACSC 09). 75 84. [88] Lin Liu. 2011. Uncovering SIP Vulnerabilities to DoS Attacks Using Coloured Petri Nets. In Proceedings of the International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 11). 29 36. [89] Low Orbit Ion Cannon. 2019. https://github.com/NewEraCracker/LOIC. [90] Prasanta C. Mahalanobis. 1936. On the Generalised Distance in Statistics. National Institute of Sciences of India 2, 1 (1936), 49 55. [91] Aanchal Malhotra, Isaac E. Cohen, Erik Brakke, and Sharon Goldberg. [n. d.]. Attacking the Network Time Protocol. [92] Aanchal Malhotra and Sharon Goldberg. 2016. Attacking NTP s Authenticated Broadcast Mode. ACM SIGCOMM Computer Communication Review 46, 2 (2016), 12 17. [93] A. Malhotra, M. Van Gundy, M. Varia, H. Kennedy, J. Gardner, and S. Goldberg. 2017. The Security of NTP s Datagram Protocol. In Proceedings of the International Conference on Financial Cryptography and Data Security (FC 17). 405 423. [94] Enterprise Management. 2020. Top 10 DDoS Protection Vendors. https://www.em360tech.com/continuity/tech- news/top-ten/top-10-ddos-protection-vendors/. [95] Georgios Mantas, Natalia Stakhanova, Hugo Gonzalez, Hossein Hadian Jazi, and Ali A. Ghorbani. 2015. Application- Layer Denial of Service Attacks: Taxonomy and Survey. International Journal of Information and Computer Security 7, 2/3/4 (2015), 216 239. [96] Hyacinth Mascarenhas. 2016. Massive test Cyberattacks using Mirai Botnet Temporarily Knock out Liberia s Internet. https://www.ibtimes.co.uk/liberia-goes-offline-temporarily-massive-test-cyberattacks-hit-west-african- nation-1589820. [97] Anil Mehta, Neda Hantehzadeh, Vijay K. Gurbani, Tin Kam Ho, Jun Koshiko, and Ramanarayanan Viswanathan. 2011. On the Inefficacy of Euclidean Classifiers for Detecting Self-similar Session Initiation Protocol (SIP) Messages. In Proceedings of the International Symposium on Integrated Network Management (IM 11) and Workshops. 329 336. [98] Metasploit. 2018. https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers. [99] Microsoft. 2019. Azure Web Application Firewall on Azure Application Gateway. https://docs.microsoft.com/en- us/azure/web-application-firewall/ag/ag-overview. [100] D. Mills, J. Martin, J. Burbank, and W.Kasch. 2010. (RFC 5905) Network Time Protocol Version 4: Protocol and Algorithms Specification. https://tools.ietf.org/html/rfc2616. [101] Mindanews. 2019. DDoS Attacks on NUJP, Alternative Media continue. https://nujp.org/headlines/ddos-attacks-on- nujp-alternative-media-continue/. [102] Jelena Mirkovic and Peter Reiher. 2004. A Taxonomy of DDoS Attack and DDoS Defense Mechanisms. ACM SIGCOMM Computer Communication Review 34, 2 (2004), 39 53. [103] Tal Mizrahi. 2012. Slave Diversity: Using Multiple Paths to Improve the Accuracy of Clock Synchronization Protocols. In Proceedings of the International Symposium on Precision Clock Synchronization for Measurement, Control and Communication (ISPCS 12). 1 6. [104] Tal Mizrahi. 2014. (RFC 7384 (informational)) Security Requirements of Time Protocols in Packet Switched Networks. https://tools.ietf.org/html/rfc7384. , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 31 [105] mod_antiloris. 2013. https://sourceforge.net/projects/mod-antiloris/. [106] mod_limitipconn. 2002. http://dominia.org/djao/limitipconn.html. [107] mod_reqtimeout. 2019. https://httpd.apache.org/docs/trunk/mod/mod_reqtimeout.html. [108] Jarmo M ls . 2005. Mitigating Denial of Service Attacks: A Tutorial. Journal of Computer Security 13, 6 (2005), 807 837. [109] Maurizio Mongelli, Maurizio Aiello, Enrico Cambiaso, and Gianluca Papaleo. 2015. Detection of DoS Attacks through Fourier Transform and Mutual Information. In Proceedings of the International Conference on Communications (ICC 15). 7204 7209. [110] Phil Muncaster. 2017. Anonymous Attacks Spanish Government Sites. https://www.infosecurity- magazine.com/news/anonymous-attacks-spanish/. [111] Mohamed Nassar and Olivier Festor. 2008. Monitoring SIP Traffic using Support Vector Machines. In Proceedings of the International Workshop on Recent Advances in Intrusion Detection (RAID 08). 311 330. [112] Jema David Ndibwile, A. Govardhan, Kazuya Okada, and Youki Kadobayashi. 2015. Web Server Protection against Application Layer DDoS Attacks using Machine Learning and Traffic Authentication. In Proceedings of the Annual Computer Software and Applications Conference (COMPSAC 15). 261 267. [113] Network Security Team of CNR Italy. 2015. Download SlowDroid DoS Tool 0.87.5 APK. https://downloadapk.net/SlowDroid-DoS-Tool.html. [114] Georgios Oikonomou and Jelena Mirkovic. 2009. Modeling Human Behavior for Defense Against Flash-crowd Attacks. In Proceedings of the International Conference on Communications (ICC 09). 1 6. [115] Rachel Rose O Leary. 2017. Bitcoin Gold Website Down Following DDoS Attack. https://www.coindesk.com/bitcoin- gold-website-following-massive-ddos-attack. [116] Vasileios Pappas, Dan Massey, and Lixia Zhang. 2007. Enhancing DNS Resilience against Denial of Service Attacks. In Proceedings of the International Conference on Dependable Systems and Networks (DSN 07). 450 459. [117] Michael Patrick. 2001. (RFC 3046) DHCP Relay Agent Information Option. https://tools.ietf.org/html/rfc3046. [118] Tao Peng, Christopher Leckie, and Kotagiri Ramamohanarao. 2007. Survey of Network-based Defense Mechanisms Countering the DoS and DDoS Problems. Comput. Surveys 39, 1 (2007), 1 42. [119] David C. Plummer. 1982. (RFC 826) An Ethernet Address Resolution Protocol. https://tools.ietf.org/html/rfc826. [120] Jon Postel and Joyce Reynolds. 1985. (RFC 959) FILE TRANSFER PROTOCOL (FTP). https://tools.ietf.org/html/rfc959. [121] Amit Praseed and P. Santhi Thilagam. 2019. DDoS Attacks at the Application Layer: Challenges and Research Perspectives for Safeguarding Web Applications. IEEE Communications Surveys & Tutorials 21, 1 (2019), 661 685. [122] Supranamaya Ranjan, Ram Swaminathan, Mustafa Uysal, Antonio Nucci, and Edward Knightly. 2009. DDoS-shield: DDoS-resilient Scheduling to Counter Application Layer Attacks. IEEE/ACM Transaction on Networking 17, 1 (2009), 26 39. [123] DARK Reading. 2018. Torii Breaks New Ground For IoT Malware. https://www.darkreading.com/attacks-breaches/- torii-breaks-new-ground-for-iot-malware/d/d-id/1332930. [124] Joy Reo. 2016. DDoS Attacks Plague Olympic Brazilian Government Websites. https://www.corero.com/blog/ddos- attacks-plague-olympic-brazilian-government-websites/. [125] Brennen Reynolds and Dipak Ghosal. 2003. Secure IP Telephony using Multi-layered Protection. In Proceedings of the Network and Distributed System Security Symposium (NDSS 03). 1 15. [126] Teri Robinson. 2020. FBI warns of DDoS Attack on State-level Voter Registration Website. Retrieved August 16, 2020 from https://www.scmagazine.com/home/security-news/fbi-warns-of-ddos-attack-on-state-level-voter-registration- website/ [127] Jonathan Rosenberg, Henning Schulzrinne, Gonzalo Camarillo, Alan Johnston, Jon Peterson, Robert Sparks, Mark Handley, and Eve Schooler. 2002. (RFC 3261) SIP: Session Initiation Protocol. https://tools.ietf.org/html/rfc3261. [128] Christian Rossow. 2014. Amplification Hell: Revisiting Network Protocols for DDoS Abuse. In Proceedings of the Network and Distributed System Security Symposium (NDSS 14). 1 15. [129] Rudy. 2011. https://packetstormsecurity.com/files/97738/R-U-Dead-Yet-Denial-Of-Service-Tool-2.2.html. [130] Scapy. 2019. Welcome to Scapy s Documentation! https://scapy.readthedocs.io/en/latest/. [131] Mathew J. Schwartz. 2016. DDoS Attack Slams HSBC. https://www.bankinfosecurity.com/ddos-attack-slams-hsbc-a- 8835. [132] Murat Semerci, Ali Taylan Cemgil, and B lent Sankur. 2018. An Intelligent Cyber Security System against DDoS Attacks in SIP Networks. Computer Networks 136 (2018), 137 154. [133] Hemant Sengar, Haining Wang, Duminda Wijesekera, and Sushil Jajodia. 2008. Detecting VoIP Floods using the Hellinger Distance. IEEE Transactions on Parallel and Distributed Systems 19, 6 (2008), 794 805. [134] Dongwon Seo, Heejo Lee, and Ejovi Nuwere. 2013. SIPAD: SIP VoIP Anomaly Detection using a Stateful Rule Tree. Computer Communications 36, 5 (2013), 562 574. [135] Sergey Shekyan. 2017. Application Layer DoS Attack Simulator. https://github.com/shekyan/slowhttptest. , Vol. 1, No. 1, Article . Publication date: May 2021. 32 Nikhil Tripathi and Neminath Hubballi [136] Amey Shevtekar and Nirwan Ansari. 2009. Is It Congestion or a DDoS Attack? IEEE Communications Letters 13, 7 (2009), 546 548. [137] Alexander Shpiner, Yoram Revah, and Tal Mizrahi. 2013. Multi-path Time Protocols. In Proceedings of the IEEE International Symposium on Precision Clock Synchronization for Measurement, Control and Communication (ISPCS 13). 1 6. [138] Mark Shtern, Roni Sandel, Marin Litoiu, Chris Bachalo, and Vasileios Theodorou. 2014. Towards Mitigation of Low and Slow Application DDoS Attacks. In Proceedings of the International Conference on Cloud Engineering (IC2E 14). 604 609. [139] Karanpreet Singh, Paramvir Singh, and Krishan Kumar. 2017. Application Layer HTTP-GET Flood DDoS Attacks: Research Landscape and Challenges. Computers & security 65, C (2017), 344 372. [140] Karanpreet Singh, Paramvir Singh, and Krishan Kumar. 2018. User Behaviour Analytics-based Classification of Application Layer HTTP-GET Flood Attacks. Journal of Network and Computer Applications 112 (2018), 97 114. [141] Khundrakpam Johnson Singh and Tanmay De. 2017. MLP-GA based Algorithm to Detect Application Layer DDoS Attack. Journal of Information Security and Applications 36 (2017), 145 153. [142] Sujatha Sivabalan and P. J. Radcliffe. 2013. A Novel Framework to Detect and Block DDoS Attack at the Application Layer. In Proceedings of the Conference on Tencon-Spring (TENCON 13). 578 582. [143] StarTrinity SIP Tester (Call Generator, Simulator) - VoIP Monitoring and Testing Tool, VoIP Recorder. 2019. http://startrinity.com/VoIP/SipTester/SipTester.aspx. [144] Zhiyang Su, Hao Ma, Xiaojun Zhang, and Bei Zhang. 2011. Secure DHCPv6 that uses RSA Authentication Integrated with Self-Certified Address. In Proceedings of the International Workshop on Cyberspace Safety and Security (CSS 11). 39 44. [145] Changhua Sun, Bin Liu, and Lei Shi. 2008. Efficient and Low-cost Hardware Defense against DNS Amplification Attacks. In Proceedings of the Global Telecommunications Conference (GLOBECOM 08). 1 5. [146] Suriadi Suriadi, Douglas Stebila, Andrew Clark, and Hua Liu. 2011. Defending Web Services against Denial of Service Attacks using Client Puzzles. In Proceedings of the International Conference on Web Services (ICWS 11). 25 32. [147] Jin Tang and Yu Cheng. 2011. Quick Detection of Stealthy SIP Flooding Attacks in VoIP Networks. In Proceedings of the International Conference on Communications (ICC 11). 1 5. [148] Jin Tang, Yu Cheng, Yong Hao, and Wei Song. 2014. SIP Flooding Attack Detection with a Multi-Dimensional Sketch Design. IEEE Transactions on Dependable and Secure Computing 11, 6 (2014), 582 595. [149] Jin Tang, Yu Cheng, and Chi Zhou. 2009. Sketch-Based SIP Flooding Detection Using Hellinger Distance. In Proceedings of the Global Telecommunications Conference (GLOBECOM 09). 1 6. [150] CA Technologies. 2018. Insider Threat 2018 Report. https://ca-security.inforisktoday.com/whitepapers/insider-threat- 2018-report-w-4131. [151] The Secure Network Time Protocol (NTPsec) Distribution. 2019. https://www.ntpsec.org/. [152] Nikhil Tripathi and Neminath Hubballi. 2015. Exploiting DHCP Server-side IP Address Conflict Detection: A DHCP Starvation Attack. In Proceedings of the International Conference on Advanced Networks and Telecommunications Systems (ANTS 15). 19 21. [153] Nikhil Tripathi and Neminath Hubballi. 2016. A Probabilistic Anomaly Detection Scheme to Detect DHCP Starva- tion Attacks. In Proceedings of the International Conference on Advanced Networks and Telecommunications Systems (ANTS 16). 1 6. [154] Nikhil Tripathi and Neminath Hubballi. 2018. Detecting Stealth DHCP Starvation Attack using Machine Learning Approach. Journal of Computer Virology and Hacking Techniques 14, 3 (2018), 233 244. [155] Nikhil Tripathi and Neminath Hubballi. 2018. Slow Rate Denial of Service Attacks against HTTP/2 and Detection. Computers & Security 72, C (2018), 255 272. [156] Nikhil Tripathi and Neminath Hubballi. 2021. Preventing Time Synchronization in NTP Broadcast Mode. Computers & Security 102 (2021), 102 135. [157] Nikhil Tripathi, Neminath Hubballi, and Yogendra Singh. 2016. How Secure are Web Servers? An Empirical Study of Slow HTTP DoS Attacks and Detection. In Proceedings of the International Conference on Availability, Reliability and Security (ARES 16). 454 463. [158] Nikhil Tripathi and Babu M. Mehtre. 2013. An ICMP based Secondary Cache Approach for the Detection and Prevention of ARP Poisoning. In Proceedings of the International Conference on Computational Intelligence and Computing Research (ICCIC 13). 1 6. [159] Nikhil Tripathi and Babu M. Mehtre. 2014. Analysis of Various ARP Poisoning Mitigation Techniques: A Comparison. In Proceedings of the International Conference on Control, Instrumentation, Communication and Computational Technologies (ICCICCT 14). 125 132. [160] Nikhil Tripathi, Mayank Swarnkar, and Neminath Hubballi. 2017. DNS Spoofing in Local Networks Made Easy. In Proceedings of the International Conference on Advanced Networks and Telecommunications Systems (ANTS 17). 1 6. , Vol. 1, No. 1, Article . Publication date: May 2021. Application Layer Denial-of-Service (DoS) Attacks and Defense Mechanisms: A Survey 33 [161] Tripwire. 2016. DYN Restores Service after DDoS Attack Downed Twitter, Spotify, Others. https://www.tripwire.com/state-of-security/latest-security-news/dyn-restores-service-ddos-attack-brought- twitter-spotify-others/. [162] Ravichander Vaidyanathan, Abhrajit Ghosh, Yuu-Heng Cheng, Akira Yamada, and Yutaka Miyake. 2012. Method and Apparatus for Detecting Spoofed Network Traffic. Patent No. US8281397B2, Issued Oct. 2nd., 2012. [163] Jin Wang, Xiaolong Yang, and Keping Long. 2011. Web DDoS Detection Schemes Based on Measuring User s Access Behavior with Large Deviation. In Proceedings of the Global Telecommunications Conference (GLOBECOM 11). 1 5. [164] Yu-Sung Wu, Saurabh Bagchi, Sachin Garg, and Navjot Singh. 2004. SCIDIVE: A Stateful and Cross Protocol Intrusion Detection Architecture for Voice-over-IP Environments. In Proceedings of the International Conference on Dependable Systems and Networks (DSN 04). 433 442. [165] Yi Xie and Shun-Zheng Yu. 2009. A Large-Scale Hidden Semi-Markov Model for Anomaly Detection on User Browsing Behaviors. IEEE/ACM Transactions on Networking 17, 1 (2009), 54 65. [166] Yi Xie and Shun-Zheng Yu. 2009. Monitoring the Application-Layer DDoS Attacks for Popular Websites. IEEE/ACM Transactions on Networking 17, 1 (2009), 15 25. [167] Chuan Xu, Guofeng Zhao, Gaogang Xie, and Shui Yu. 2014. Detection on Application Layer DDoS using Random Walk Model. In Proceedings of the International Conference on Communications (ICC 14). 707 712. [168] Takeshi Yatagai, Takamasa Isohara, and Iwao Sasase. 2007. Detection of HTTP-GET Flood Attack Based on Analysis of Page Access Behavior. In Proceedings of the Pacific Rim Conference on Communications, Computers and Signal Processing (PacRim 07). 232 235. [169] Saman Taghavi Zargar, James Joshi, and David Tipper. 2013. A Survey of Defense Mechanisms against Distributed Denial of Service (DDoS) Flooding Attacks. IEEE Communications Surveys & Tutorials 15, 4 (2013), 2046 2069. [170] Heng Zhang, Ahmed Taha, Ruben Trapero, Jesus Luna, and Neeraj Suri. 2016. SENTRY: A Novel Approach for Mitigating Application Layer DDoS Threats. In Proceedings of the International Conference On Trust, Security And Privacy In Computing And Communications (TrustCom 16). 465 472. [171] Liang Zhu, Zi Hu, John Heidemann, Duane Wessels, Allison Mankin, and Nikita Somaiya. 2015. Connection-Oriented DNS to Improve Privacy and Security. In Proceedings of the IEEE Symposium on Security and Privacy (S&P 15). 171 186. , Vol. 1, No. 1, Article . Publication date: May 2021. View publication stats