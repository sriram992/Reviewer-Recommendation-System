See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/331039821 SysEvoRecomd: Graph Evolution and Change Learning Based System Evolution Recommender Conference Paper November 2018 DOI: 10.1109/ICDMW.2018.00217 CITATIONS 8 READS 60 2 authors, including: Some of the authors of this publication are also working on these related projects: Automated web service change management View project Animesh Chaturvedi Indian Institute of Information Technology, Design and Manufacturing Jabalpur 17 PUBLICATIONS 112 CITATIONS SEE PROFILE All content following this page was uploaded by Animesh Chaturvedi on 04 April 2019. The user has requested enhancement of the downloaded file. XXX-X-XXXX-XXXX-X/XX/$XX.00 20XX IEEE SysEvoRecomd: Graph Evolution and Change Learning based System Evolution Recommender Animesh Chaturvedi Computer Science and Engineering Indian Institute of Technology Indore Indore, India animesh.chaturvedi88@gmail.com Aruna Tiwari Computer Science and Engineering Indian Institute of Technology Indore Indore, India artiwari@iiti.ac.in Abstract In this paper, we present our approach System Evolution Recommender (SysEvoRecomd). In SysEvoRecomd, we used our proposed Graph Evolution and Change Learning (GECL) that does matrix reconstruction. Based on SysEvoRecomd, we developed an automation tool named as SysEvoRecomd-Tool, which is used to conduct experiments on various real-world evolving systems. Keywords Machine learning, Graph (network) theory, and Systems engineering and theory. I. INTRODUCTION An evolving system is a system which is continuously changing with time [1][2][3]. Constant growth of system make its maintenance a challenging task. Improper utilization of entities may lead to inefficient maintenance. Further, there is also a possibility of logical errors and faults in newer component due to many developers. The study of the system evolution can help to tackle these problems. An evolving system can be represented as a graph of entity-connections (a set of entities are vertices and directional connections among entities are edges). By learning patterns of entity connections in various system states, it is possible to recommend relevant and existing entity connections during system development. Learning changes in patterns of entity connections can improve components (or entities) reusability that saves both time and effort for system development by teams. Suppose a system becomes large and its patterns of entity connections became more complex. This is due to evolution and changes in the entity connections of the evolving system. Tracking changes in patterns of entity connections over time is a challenging problem for humans. This implies, these change information can predict connections, which further makes future system recommendations. As a result, machine-learning techniques become an appropriate option that can learn the patterns of entity connections. Deep learning is a machine learning technique that forms a Deep Neural Network (DNN) (a type of Artificial Neural Networks (ANN) inspired by biological systems) [4]. We aim to reconstruct matrix of a system network (graph), which gives recommendation about system that can further help in system development and maintenance. Current state-of-art with work related to recommender or predictive systems includes following. Castro-Herrera et al. [5] describe a recommender system that helps in the challenges of dynamic evolving internet forums and representations of user profiles. Susto et al. [6] presented an adaptive machine learning and regularized regression based method to support decisions for flexible predictive maintenance. Yin et al. [7] proposed temporal context-aware recommender system (TCARS) for analysing user behaviours in social media systems that are influenced by intrinsic interest and the temporal context. Zeng et al. [8] proposed dynamical context drift model using particle learning for time varying contextual multi-armed problem. Rolfsnes et al. [9] proposed use of random forest classification models to improve interestingness measures (such as confidence and support) by learning previous changes. The graph learning approaches is applicable to do scenario like Collective Robot Learning (as described by Kehoe et al. [10]). Our SysEvoRecomd can be applicable to all such environments. II. SYSEVORECOMD APPROACH AND TOOL This section describes the proposed System Evolution Recommender, which uses Graph Evolution and Change Learning (GECL). The SysEvoRecomd learns the evolution based on changes happened among evolving system states. Suppose an evolving system has more than N+1 continuously evolving states, such that we can use N states for training purpose and 1 remaining state for testing purpose. Retrieve N+1 states {S1, S2 SN+1} and store them in a local directory. The SysEvoRecomd preprocess a set of states to create a collection of N+1 graphs in the form of connection lists with a mapping file. The SysEvoRecomd converts the collection of graphs into N+1 connection matrices. A deep learning technique can help in efficient learning of evolution in a state series. To do this, we introduced Graph Evolution and Change Learning (GECL), which processes the N connection matrices and produces an output matrix. The SysEvoRecomd compares the output matrix with testing matrix (a matrix not used for training). System Evolution Recommender learns evolution happened over evolving states of a system at various time-points. It makes the machine capable enough to understand the evolution in a state series without any explicit programming. The learned information can recommend about the system evolution. Graph Evolution and Change Learning is the process of learning evolution happened over evolving graphs from an intermediate representation that contains changing patterns of entity connections. It makes the machine capable enough to understand the evolution in an evolving graph state without any explicit programming. The GECL can do network reconstruction in the form of a connection matrix. The GECL may also be referred as Network Evolution and Change Learning (NECL). The SysEvoRecomd theory and approach creates basis for us to develop an automation tool named as SysEvoRecomd Tool. The tool helps in recommendations about system states, which reduces human intervention and efforts. We developed the tool on Java. Our tool pre-processes evolving entity connections in evolving networks (graphs) of a system state series. After pre-processing, SysEvoRecomd-Tool converts each evolving graph into a connection matrix. The tool has GECL, which uses Deep Evolution Learner (DEL) to generate Deep System Neural Network (Deep SysNN). The tool uses the GECL to reconstruct a zero matrix into an output matrix, which helps to study the system evolution. Our tool learns and recommends the patterns of evolving entity connections over a state series. This helps to study and recommend about system s evolution. A practitioner dealing with an evolving system (represented as a series of graphs with inter-connected entities) can find our tool interesting. An evolving graph represents connections between system entities. Our SysEvoRecomd approach considers graph and evolution learning together, and it added a notion of graph (network) matrix reconstruction. Our approach is an automated technique to build a recommender system. With the proposed SysEvoRecomd approach and tool, one can learn evolution happened to a system over time. This learning can be used to do recommendation (or prediction) the about system. Further, our tool would be helpful in making recommendations about system evolution in following ways. It can predict unknown connections between entities. It is helpful while upgrading system to a new state. It is helpful during intermediate phase of the system development. It can assist a system developer. It can speed-up the system development. It can do automatic correction of some errors during system development. It can determine possible future of the system. These advantages are analysed with the experiments (in the next section), which enables to use such recommender system for an evolving system. III. EXPERIMENTS We formed evolving networks (graphs) of six evolving systems, which are used to conduct experiments. The evolving networks (graphs) of the six evolving systems are based on four different domains. We further converted these networks to evolving connection matrices for training purpose using the GECL (graph evolution and change learning) approach. The GECL internally uses DEL (deep evolution learner) approach. We benchmark SysEvoRecomd-Tool for six evolving systems collected from six open-internet repositories. We collected data from four types of repositories: Wikipedia, Software repository, UCI repository, and IMDb. These system data have rich state or time instance history due to active contributions on them. We used these datasets because they provide many states to evaluate our system evolution recommender tool. For each evolving system, we made its combined matrix for the training phase of GECL. To study system evolution, we used GECL by using models of deep evolution learner based on the fundamental models of deep learning. In addition to this, we used the six evolving systems to perform system evolution analytics [11][12] and to calculate system network complexity [13]. IV. CONCLUSIONS We presented our approach System Evolution Recommender (SysEvoRecomd) based on Graph Evolution and Change Learning (GECL), which uses deep evolution learner for network matrix reconstruction. We find our tool SysEvoRecomd is useful for system evolution analysis by doing system evolution recommendations. REFERENCES [1] A. M. Ross, D. H. Rhodes, and D. E. Hastings. Defining changeability: Reconciling flexibility, adaptability, scalability, modifiability, and robustness for maintaining system lifecycle value. Systems Engineering 11.3 (2008): 246-262. [2] S. A. Frost, and M. J. Balas. Evolving Systems and Adaptive Key Component Control . In: Arif, T.T. (ed.) Aerospace Technologies Advancements. ISBN: 978-953-7619-96-1 (2010). [3] M. B ttcher et al. On exploiting the power of time in data mining. ACM SIGKDD Explorations Newsletter 10.2 (2008): 3-11. [4] Y. LeCun, Y. Bengio, and G. Hinton. Deep learning. Nature 521.7553 (2015): 436-444. [5] C. Castro-Herrera, J. Cleland-Huang, and B. Mobasher. A recommender system for dynamically evolving online forums. 3th ACM Conference on Recommender Systems. ACM, 2009. [6] G. A. Susto, et al. An adaptive machine learning decision system for flexible predictive maintenance. 2014 IEEE Int. Conf. on Automation Science and Engineering (CASE). IEEE, 2014. [7] H. Yin, et al. Dynamic user modeling in social media systems. ACM Trans. on Information Systems (TOIS) 33.3 (2015): 10. [8] C. Zeng, et al. Online context-aware recommendation with time varying multi-armed bandit. 22nd ACM SIGKDD Int. Conf. on Knowledge Discovery and Data Mining. ACM, 2016. [9] T. Rolfsnes, L. Moonen, and D. Binkley. Predicting relevance of change recommendations. 32nd IEEE/ACM Int. Conf. on Automated Software Engineering. IEEE Press, 2017. [10] B. Kehoe, et al. A survey of research on cloud robotics and automation. IEEE Trans. on Automation Science and Engineering 12.2 (2015): 398-409. [11] A. Chaturvedi and A. Tiwari. System Evolution Analytics: Evolution and Change Pattern Mining of Inter-Connected Entities . IEEE Int. Conf. on Systems, Man, and Cybernetics (SMC) 2018. [12] A. Chaturvedi and A. Tiwari. System Evolution Analytics: Deep Evolution and Change Learning of Inter-Connected Entities . IEEE Int. Conf. on Systems, Man, and Cybernetics (SMC) 2018. [13] A. Chaturvedi and A. Tiwari. System Network Complexity: Network Evolution Subgraphs of System State series . IEEE Transactions on Emerging Topics in Computational Intelligence. View publication stats