Development of Reusable Hybrid Test Automation Framework for Web Based Scrum Projects Sulabh Tyagi1*, Ritu Sibal1, Bharti Suri2, Bimlesh Wadhwa3 and Shanuj Shekhar4 1Netaji Subhas Institute of Technology, University of Delhi, New Delhi, India 2Guru Gobind Singh Indraprastha University, New Delhi, India 3National University of Singapore, Singapore 4National Institute of Technology, Jalandhar, Punjab, India Abstract Web based applications are gaining widespread popularity and most of these applications are being developed using agile development methods mainly scrum. This invariably makes the testing of any web application necessary and important before it goes online. Agile methods advocate automated testing, which is the only way to assure faster thorough testing of any web application. In this paper, authors propose a reusable hybrid test automation framework (RHTAF) using page object model for automated testing of web applications. RHTAF combines the features of both data driven and keyword driven frameworks and developed using Selenium 2.0 tool. The primary focus of this framework is to ensure reusability and maintainability of test scripts so as to speed up the testing process of web applications. Key Words: Test Automation, Agile Software Development, Scrum, Frameworks, Web Applications 1. Introduction Testing is an integral part of any agile development method and is primarily automated. Agile methods are being embraced by primary areas of computing for soft- ware development and one of these is web engineering. According to [1] the most widely used agile methods are scrum and XP. Of these two, scrum follows sprint based development and gives leverage to customers by provid- ing potentially shippable product at the end of every sprint. To deliver a quality product at the end of every sprint it is important to overcome certain challenges like short development cycles, automating daily activities like smoke testing, regression testing, continuous integration and deployment process. Furthermore, with every subsequent sprint, it becomes inevitable to check proper functioning of existing functionalities. Automated testing assures thorough testing in spite of tight deliverable schedules. Our previous paper [2] reported the test script mainte- nance as one of the key challenges faced by agile practi- tioners while practicing test automation on their projects, this further leads us to develop our research questions: RQ1: How to develop a test automation framework that can provide high reusability and maintainability of test scripts? RQ2: How to use this framework in actual agile soft- ware development methods like scrum? In order to answer these questions, it is important to establish the understanding of different test automation frameworks and automation tools that are prevalent in software industry. An automation framework is defined as an overall architecture that contains test data, test cases, test scripts, test automation tool, test reporting and proper strategy to execute the testing problem. Automation frameworks are broadly of three types, namely: 1. Data Driven Framework - It is primarily used for exe- cuting set of test steps with multiple sets of data [3]. In Journal of Applied Science and Engineering, Vol. 21, No. 3, pp. 455462 (2018) DOI: 10.6180/jase.201809_21(3).0017 *Corresponding author. E-mail: sulabhtyagi2k@yahoo.co.in this framework, set of test input is read from data files like CSV files, Excel files, ADO objects, etc. and are loaded into variables in captured or manually coded script. 2. Keyword Driven Framework - In this framework each test step of every test case is associated with a key- word. Keywords are stored in excel file and driver script reads them to perform user actions. 3. Hybrid Framework - It is a combination of both data driven and keyword automation framework. This frameworks stores keyword for each test case step and at the same time test data can also be read from excel files to run multiple sets of data. Many test automation tools are available in the mar- ket today like QTP (quick test functional) test complete and selenium. We used seleniumtool to implement RHTAF and reasons to prefer selenium over other tools are; firstly, selenium is open source tool and cannot levy any license fee. Secondly, selenium gives leverage to automate web applications with multiple programming language sup- port like Java, C# and Python. Recently, Selenium RC and Web Driver are merged to form Selenium 2.0 which offers many advantages like direct communication with the browser, Simple API s without any redundancy and easy architecture [3]. Selenium 2.0 supports multiple web browsers like Chrome, Firefox, Internet Explorer and Safari [4]. In this paper, we propose a hybrid automation frame- work with Selenium 2.0 using Page Object Model (POM). Normally, any web application comprises of multiple web pages and each webpage has a different set of ob- jects also know as UI elements to interact with. More- over, most of the time a single UI element is being used in multiple test cases sometimes as many as twenty or thirty odd test cases so if that UI element undergoes any change than one has to traverse these twenty or thirty odd test cases to update that change. By using POM, change has to be made under that particular page object class containing the reusable method for that particular UI ele- ment and all the test cases need to call that reusable me- thod of that particular POM class. Hence, a page object model simply models the objects within the test code. This reduces the amount of duplicated code and thus, if the UI changes frequently, the fix needs only to be ap- plied at one place. The rest of this paper is structured as follows: next section briefs about background; the third section de- scribes the implementation and experimental analysis of this study; the fourth section presented the results; and the last section concludes the paper. 2. Background Today most of the software industries are migrating from bulkier development methods to lightweight agile methods. In agile methods automation testing strategies are followed in order to improve quality of the product, reduce cycle time and for optimal utilization of man- power [5]. According to [6], technical debt accumulates if development team opts shortcut approach, hacks in quick fixes, skips writing automating test and eventually code base gets harder and harder to maintain and this leads to the higher maintenance cost and lower team ve- locity. Tyagi et al. [2] reported the use of test automation frameworks in solving the test script maintenance prob- lem for agile software development projects. Moreover, other studies [7,8] also depicted the importance of han- dling the test script maintenance and effective test auto- mation. Rafi et al. [9] discussed the superiority and ben- efits of test automation when several regression rounds are needed. In study by Puleio s [10] test automation was seen as a key factor in agile testing to keep development and testing in synchronization. Test automation is of prime importance in agile projects, continuous testing would have been impossible without test automation. Hui et al. [11] argued that keyword driven automated testing frame- work has better reusability than recording/playback and data driver frameworks and presented keyword driven distributed framework for Linux platform. In [12] au- thors presented extension of selenium RC tool to per- form automated database testing in web applications. 3. Proposed Framework In this paper, we propose a reusable hybrid test auto- mation framework using page object model. Use of page object model in designing this hybrid test automation framework makes it unique. The need of continuous de- livery of features and change requests with every subse- 456 Sulabh Tyagi et al. quent sprint in an agile development project makes it prone to higher maintenance costs and development time, hence without in place test automation framework it is very difficult to cope up with such challenges. Our test automaton framework which is based on POM would in- herently make script maintenance easier and also makes test execution simpler and faster. Eclipse IDE is used to develop RHTAF using Selenium 2.0. Eclipse is preferred over Visual Studio due to many reasons like eclipse is open source IDE, test script creation and test execution is also fast and easy in eclipse IDE. 3.1 Three Layer Architecture of Proposed Reusable Hybrid Automation Framework We implemented reusable hybrid test automation framework using three layered architecture as shown in Figure 1 below. Layer 1 - It comprised of Application Under Test (AUT) that could be run on any browser such as internet explorer, google chrome orfirefox. This study used two famous e-commerce portals-www.amazon.in and www. flipkart.com as its web applications under test. Chrome is used as a web browser to test our AUT. Layer 2 - Actual hybrid test automation framework that is build using selenium web driver was implemented at this layer. Major components of layer 2 are as follows: Driver Script - Driver script consist of main() func- tion that consist of set of tests that calls the reusable me- thods under the respective POM Class along with the ReadExcelFile() function which reads the excel file con- taining sheets row by row which shows the hybrid nature of framework (Combination of Keyword and Data Dri- ven Framework) as shown in Figure 2. POM Class - It contains all the objects and actions to be performed on that object within a particular webpage. Example-POM class LoginPage.java is created for auto- mating the login functionality and reusable methods were written for automating different user actions like enter username, enter password etc. on that page. Similarly for each webpage, a separate POM class has been created which contains its own member functions. Error/Exception handling - These are functions which take care of unexpected errors such as error or warning messages during execution of the test case. Result (Report) - This refers to the reporting of the test cases execution report in the prescribed format for the analysis. We used extent report plug-in to generate the reports for every executed test case. Layer 3 - It comprises of input data files in .xls for- mat containing test data for each test scenario that is one column containing all the reusable keywords for each web page of our application under test and other column is for the data driven framework mainly in the form of excel file as shown in Figure 2. Our framework also has the screenshots functionality which captures the screenshot in case of failed test case to record any error or warning messages during execution of the test script. 3.2 Implementation and Experimental Analysis of RHTAF in Scrum Environment The implementation of our reusable hybrid test auto- Development of Reusable Hybrid Test Automation Framework for Web Based Scrum Projects 457 Figure 1. Three layer RHTAF architecture. mation framework (RHTAF) using page object model was performed on www.amazon.in and www.flipkart.com, two widely used e-commerce websites in India. RHTAF is implemented and experimentally analyzed by simulat- ing scrum environment, one of the most popular and widely used agile software development methods where manual test cases have been written for the business crit- ical functionality for the two websites, then we split the total number of test cases in three successive sprints (sprint is a time box effort to deliver potentially shipp- able product). Our sprint duration was two weeks per sprint, RHTAF was developed and applied to automate these test cases on sprint by sprint basis. 3.2.1 Insprint Test Automation Test Strategy We also propose insprint automation test strategy to use our RHTAF on web based projects developed under scrum environment. In insprint automation test strategy, firstly, test scenarios have been identified for each sprint then regression test cases were designed for that particu- lar sprint based on the business criticality. Finally regres- sion test cases from each sprint were automated using our RHTAF. Present study implemented RHTAF over three sprints and automated regression test cases of these two websites has been shown in Table 1. In sprint 1, re- gression test cases that cover important business critical test cases were automated that includes Login, Add Ad- dress, Delete Address and Edit Address functionalities for both the websites. These test cases from T1-T8 be- came an initial part of our regression test suite denoted by R1.1 which means regression test suite for release 1 and sprint 1. Similarly, In sprint 2, test cases from T9- T14 were automated and added to regression test suite R1.1 that became our regression test suite R1.2. In the same way, we automated test cases from T15 to T20 that were added to regression test suite R1.2 and we got our completed regression suite for release 1 that is R1.3 as shown in Figure 3 and our complete regression test suite can be calculated as: complete regression suite (R1) = (T1-T20) = R1.3. Automating our regression tests using RHTAF on sprint by sprint basis gave us leverage to had one subset of regression suite ready by the end of sprint 1 which we ran at the start of sprint 2. Similarly, we had one subset of regression suite ready by the end of sprint 2 which we ran at the beginning of sprint 3 and finally at the end of sprint 3 our whole regression test suite was ready which we ran at the hardening sprint to check overall functionally of our application under test. Due to space reasons we are showing implementation of our framework with the help 458 Sulabh Tyagi et al. Table 1. Different regression test cases automated over 3 sprints Sprint number Test case number Test case name Test case scenario (positive or negative) 1. T1 Open browser Positive 1 T2 Login Negative 1. T3 Login Positive 1. T4 Add address Positive 1. T5 Delete address Positive 1. T6 Edit address Negative 1. T7 Edit address Positive 1. T8 Cart lookup Positive 2. T9 Search product Positive 2. T10 Add to cart Positive 2. T11 Delete from cart Positive 2. T12 Search product Positive 2. T13 Add to cart Positive 3. T14 Proceed to checkout Positive 3. T15 Login Positive 3. T16 Change address Positive 3. T17 Add address Positive 3. T18 Choose delivery speed Positive 3. T19 Choose payment method Positive 3. T20 Place your order Positive Figure 2. Input excel file containing keywords and data for RHTAF. of some selected Figures from every sprint as given be- low. Firstly, Driver script that is Main function() calls the ReadExcelFile() function as shown in Figure 4 which reads the input excel file row by row and when it reads the second element (keyword) as shown in Figure 2 of the row then corresponding page object class is called and corresponding member function (reusable method) is being executed. Hence for the second test case i.e. T2, main function() calls the ReadExcelFile() function which reads the input excel file and on finding Signin key- word, it calls the LoginPage.Java POM class which in turn executes the corresponding member function for ex- ecuting login test case for amazon.in as shown in Figure 5 and Figure 6. In sprint 2, for Search Product test case; main func- tion calls the ReadExcelFile() function which reads the excel file row by row and on finding Search Product keyword, it calls the SearchProduct.Java POM class which in turn executes the corresponding member function for executing Search Product test case for amazon.in as shown in Figure 7 and Figure 8. Similarly, in sprint 3, for Choosing a Payment Me- thod test case; main function calls the ReadExcelFile() function which reads the excel file row by row and on finding Payment By keyword, it calls the Payment- By.Java POM class which in turn executes the corre- sponding member function for executing Search Product test case for amazon.in. 4. Results We have successfully implemented reusable hybrid test automation framework using page object model for web based applications in simulated scrum environment. Our experimental analysis of our RHTAF on amazon.in and flipkart.com showed that our regression testing effi- Development of Reusable Hybrid Test Automation Framework for Web Based Scrum Projects 459 Figure 4. Driver (main) function of www.amazon.in. Figure 3. Block diagram showing implementation of RHTAF over three sprints in scrum environment. 460 Sulabh Tyagi et al. Figure 5. Sprint 1 - automation of login functionality using Page Object Model for amazon.in. Figure 6. Execution of login test case of amazon.in. Figure 7. Sprint 2 - automation of search product functionality using Page Object Model for amazon.in. ciency is improved remarkably as we were able to run our regression test suite right from the beginning of sprint 2 which is very much useful in the agile software development projects. The use of POM makes this frame- work highly reusable and maintainable as we have used the same framework for two different ecommerce web- sites, and lastly testing cycle time also been reduced con- siderably as shown in Table 2 which addressed our RQ1. We saved around thrice the test execution time by auto- mating our regression tests using RHTAF. Our insprint test automation strategy proved to be very useful in ap- plying RHTAF right from the sprint 1 and we had the subset of regression suite ready that was executed before the beginning of the next sprint, this addressed our RQ2. Moreover, we also integrated the result reporting facility in our framework with the help of which entire test sum- mary is readily available after test case execution and also graphical representation of test result summary is also displayed to have a quick view on the pass/fail status of the test cases as shown in Figure 9 for amazon.in and Figure 10 for flipkart.com. 5. Conclusion and Future Work This paper makes two important contributions. First, Development of Reusable Hybrid Test Automation Framework for Web Based Scrum Projects 461 Figure 8. Sprint 2 - execution of search product test case of amazon.in. Table 2. Total time taken manual vs. automated test case execution E-commerce website Total time taken (manual test execution) Total time taken (automated test execution using RHTAF) Amazon 15 m 36 sec 6 m 8 sec Flipkart 10 m 10 sec 3 m 42 sec Figure 9. Graph showing test result summary along with total test execution time for amazon.in. Figure 10. Graph showing test result summary along with total test execution time for flipkart.in. we implemented the reusable hybrid test automation framework using page object model for web based agile projects. Use of hybrid i.e. combination of keyword dri- ven and data driven frameworks along with the page ob- ject model concept makes this framework reusable and maintainable and efficient for automating regression tests. Secondly, we demonstrated the application of this framework on two famous e-commerce platforms i.e. amazon.in and flipkart.com in real agile environment within sprint test automation strategy. We demonstrated the effectiveness of our RHTAF while automating re- gression tests for both of these websites right from the very first sprint and gradually build up our regression suite which proves very useful in faster test execution and finding defects right from the beginning of the sprint which in turn improves the overall quality of the applica- tion under test. In the future research, we will try to de- velop this framework for other IDE s like Microsoft Vi- sual Studio and will also try to explore other frameworks like behavioral driven framework (BDD) for automating test cases in agile software development environment. References [1] Dyba, T. and Dingsoyr, T., Empirical Studies of Agile Software Development: a Systematic Review, In- form. Softw. Technol. (2008). doi: 10.1016/j.infsof.2008. 01.006 [2] Tyagi, S., Sibal, R. and Suri, B., Adopting Test Auto- mation on Agile Development Projects: a Grounded Theory Study of Indian Software Organizations, In: Baumeister H., Lichter H., RiebischM. (eds) Agile Processes in Software Engineering and Extreme Pro- gramming. XP 2017. Lecture Notesin Business Infor- mation Processing, Vol. 283. Springer, Cham. (2017). doi: 10.1007/978-3-319-57633-6_12 [3] Information on http://seleniumdotnet.blogspot.in/ Last accessed 08 Oct 2016. [4] Information on http://www.seleniumhq.org. Last ac- cessed 12 Oct 2016. [5] Crispin, L. and Gregory, J., Agile Testing: a Practical Guide for Testers and Agile Teams, Addison-Wesley (2009). ISBN 0-321-53446-8 [6] Collins, E. F. and de Lucena, V. F., Software Test Au- tomation Practices in Agile Development Environ- ment: an Industry Experience Report, 7th Interna- tional Workshop on Automation of Software Test (AST), Zurich, 2012, pp. 5763 (2012). doi: 10.1109/ IWAST.2012.6228991 [7] Karhu, K., Repo, T., Taipale, O. and Smolander, K., Empirical Observations on Software Testing Auto- mation, Proceedings of the 2nd International Confer- ence on Software Testing, Verification, and Validation (ICST 2009), Denver, Colo, USA, pp. 201 209 (2009). doi: 10.1109/ICST.2009.16 [8] Deak, A., A Comparative Study of Tester s Motiva- tion in traditional and Agile Software Development, Product Focused Software Process Improvement, pp. 1 16 (2014). doi: 10.1007/978-3-319-13835-0_1 [9] Rafi, D. M., Reddy, K., Moses, K., Petersen, K. and M ntyl , M. V., Benefits and Limitations of Auto- mated Software Testing: Systematic Literature Review and Practitioner Survey, 7th International Workshop on Automation of Software Test (AST), Zurich, pp. 3642 (2012). doi: 10.1109/IWAST.2012.6228988 [10] Puleio, M., How Not to Do Agile Testing, Proceed- ings of the Conference on AGILE 2006 (AGILE 06). IEEE Computer Society, Washington, DC, USA, pp. 30531 (2006) doi: 10.1109/AGILE.2006.34 [11] Hui, J., Yuqing, L., Pei, L., Shuhang, G. and Jing, G., LKDT: a Keyword-Driven Based Distributed Test Framework, International Conference on Computer Science and Software Engineering, Wuhan, Hubei, pp. 719722 (2008). doi: 10.1109/CSSE.2008.1036 [12] De Castro, A. M., Macedo, G. A., Collins, E. F. and Dias-Neto, A. C., Extension of Selenium RC Tool to Perform Automated Testing with Databases in Web Applications, 8th International Workshop on Auto- mation of Software Test (AST), San Francisco, CA, pp. 125131 (2013). doi: 10.1109/IWAST.2013.6595803 Manuscript Received: Nov. 13, 2017 Accepted: Dec. 23, 2017 462 Sulabh Tyagi et al.