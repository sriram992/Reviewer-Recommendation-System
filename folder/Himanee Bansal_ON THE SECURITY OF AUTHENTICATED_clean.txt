Scalable Computing: Practice and Experience Volume 20, Number 1, pp. 93 99. http://www.scpe.org DOI 10.12694/scpe.v20i1.1440 ISSN 1895-1767 c 2019 SCPE ON THE SECURITY OF AUTHENTICATED GROUP KEY AGREEMENT PROTOCOLS SUMAN BALA , GAURAV SHARMA , HIMANI BANSAL , AND TARUNPREET BHATIA Abstract. The group key agreement protocol enables to derive a shared session key for the remote members to communicate securely. Recently, several attempts are made to utilize group key agreement protocols for s ecure multicasting in Internet of Things. This paper contributes to identify the security vulnerabilities in the existing protocols, to avoid them in future constructions. The protocols presented by Gupta and Biswas have been found insecure to ephemeral secret key leakage (ESL) attack and also, malicious insiders can impersonate an honest participant. Additionally, the protocol presented by Tan is also ESL-insecure. We also present a x to the Tan s protocol to make it secure. Key words: Group key agreement, Authentication, Insider security, Mutual authentication AMS subject classi cations. 68M12 1. Introduction. The recent security concerns are prevailing when multiple devices over a wireless com- munication interact among them leaking sensitive information to a non-participating entity [20, 19]. A common concern in these real world applications is to establish a secure session among the interested remote participants. It is always challenging to derive a shared secret key which can prevail over the advantages of adversary. A group key agreement (GKA) protocol enables the participating members to establish such a symmetric session key, usually following an asymmetric procedure. This symmetric key is further used for encryption decryption purpose. Various real life applications of GKA includes distributed computations, video conferencing and multi- user games. A variety of key establishment approaches have been presented in literature based on the network characteristics, agreement strategy, communication rounds and contributiveness. The two major classes repre- senting the protocols are either transportation of session key or agreement via participant s contribution. In the key transport protocols, the session key is derived by one of the powerful nodes and then transferred securely to all the members of the group. The common session key, derived by all the members following an interactive protocol, is known as key agreement protocols. The hybridization of above two categories can originate another variety of protocols namely, balanced and imbalanced protocols. The balanced protocols are equally contributive protocols while in imbalanced, all the participants contribute but the major part of computations, such as signature veri cation, is performed by some powerful node. Other than preserving the basic attributes such as known key security and forward secrecy, contributiveness is an important aspect of a GKA protocol. By contributiveness, we mean that all the member s contributions are involved so that none of the member can predetermine the session key without incorporation of other members. Following the Di e and Hellman [8] work on two-party key exchange, there has been extensive e orts to convert their two-party key exchange protocol to multi-party key exchange protocol [6, 11, 21]. Among the most notable works, Joux s one round three-party key agreement protocol [13] is considered as a signi cant contribution for practical GKA protocol due to the functionality of pairing. Based on Joux s work [13], Barua et al. [1] have presented protocols of multi-party key agreement in two avours unauthenticated- based on ternary trees and authenticated- from bilinear maps. Unfortunately their protocols are secure against passive adversaries only. As established by Bellare and Rogaway (Crypto 93) [2], to avoid man in the middle (MITM) attack, authentication is an essential security requirement for key exchange protocols. The rst contribution towards modeling provable security for authenticated key exchange (AKE), was commenced by Bresson et al. [3, 4, 5] but their protocol accounts O(n) rounds, which is very expensive. Later in 2003, Katz and Yung [15] presented a scalable compiler to transform any unauthenticated GKA into an authenticated GKA with the additional cost of one round. Since the GKA study involves multiple participants, the consideration of malicious insider is a realistic scenario. Katz and Shin [14] rstly modeled the insider Universit e Libre de Bruxelles, Belgium (suman1005@gmail.com) Universit e Libre de Bruxelles, Belgium Jaypee Institute of Information Technology, Noida, India Thapar University, India 93 94 S. Bala, G. Sharma, H. Bansal, T. Bhatia security in GKA protocols. Gorantla et al. [9] studied that the compromise of long-term key of one participant should not enable the impersonation of any other participant. The improved security model which addresses the forward secrecy and key compromise impersonation resilience (KCIR) for GKA protocols to take into account authenticated key exchange (AKE) security and mutual authentication (MA) security. In 2011, their model was revisited and enhanced by Zhao et al. [30] where they addressed the ephemeral secret key leakage (ESL) attack. The extended model is the strongest model, as it takes into account both the leakage of secret key as well as the leakage of ephemeral key independently. However, Tseng et al. [23] argued about the insu ciency of UF-ACMA secure signature scheme and proposed a UF-ACM-ESL secure signature based on Schnorr [17]. In identity based setting, the rst authenticated ID-based GKA protocol was formalized by Choi et al.[7] in 2004, but their scheme was found vulnerable to insider colluding attack [29]. In 2007, Shim [16] claimed that scheme in [7] is vulnerable to another insider colluding attack and improved the protocol. Unfortunately, none of these AGKA protocols could achieve the perfect forward secrecy. Perfect forward secrecy allows the compromise of long term secret keys of all participants maintaining all earlier shared secrets unrevealed. In 2011, Wu et al. [28] presented a provably secure ID-AGKE protocol from pairings, providing forward secrecy and security against the insider attacks. Later, Wu et al. [27] presented their rst revocable ID-based AGKE (RID-AGKE) protocol, which is provably secure and can resist malicious participants as well. The main attraction of this protocol was e cient revocation of group members. However, the protocol takes three rounds but unable to identify malicious participants. In a subsequent improvement, Wu et al. [26] proposed an ID-based AGKE protocol, which can passively detect malicious participants and also proved its security against insider attacks. Although, the protocol was later found insecure against an insider colluding attack by [24]. Afterwards, a two round revocable ID-AGKE protocol was presented by Wu et al. [25] which can identify malicious participants. Another work on authenticated group key agreement protocol without pairing is presented by Sharma et al. [18]. Recently in 2017, Gupta and Biswas [10] presented an ECCbased AGKA protocol and claimed it computationally e cient. However, in this paper, we present security aws in their construction and proved it insecure. All the above discussed protocols are balanced GKA protocols where all the participants contribute equally and derive a shared session key. On the other hand, some imbalanced GKA protocols are also presented where one of the powerful node contribute more in the computational sense. A recent contribution to improve the computational e ciency by Islam et al. [12] is presented. This is an ECC-based ID-AGKA protocol for imbalanced mobile networks. The best feature of this protocol is pairing-free property. However, Tan [22] found the Islam et al. [12] construction insecure and improved it. We present an ESL attack on their improved work and attempt to x it. Rest of the paper is organized as follows: in Section 2, we introduce necessary de nitions, corresponding hardness assumption for AGKA protocol and standard security model for AGKA. Section 3 and Section 4 describes the AGKA protocols and our attacks on their construction, followed by the conclusion Section 5. 2. Preliminaries and De nitions. In this section, we introduce mathematical de nitions, hardness assumptions, the notion of AGKA protocol and security model for it. If X is a set, then y $ X denotes the operation of choosing an element y of X according to the uniform random distribution on X. 2.1. Notations Used. This section describes the preliminaries used for AGKA protocol. Table 2.1 shows the notations used throughout the paper. 2.2. De nitions and assumptions. Definition 2.1 (Computational Di e-Hellman Problem (CDHP)). Let G be an additive cyclic group (precisely an elliptic curve group) of order q with generator P. Let CDH : G G G be a map de ned by CDH(X, Y ) = Z, where X = aP, Y = bP and Z = abP . The computational Di e-Hellman problem (CDHP) is to evaluate CDH(X, Y ) given X, Y $ G without the knowledge of a, b Z q. (Note that obtaining a Z q, given P, X G is solving the elliptic curve discrete logarithm problem (ECDLP).) Definition 2.2 (Computational Di e-Hellman Assumption). Given a security parameter , let q, G, P, X, Y, G( ). The computational Di e-Hellman assumption (CDHA) states that for any PPT algorithm A which On the Security of Authenticated Group Key Agreement Protocols 95 Table 2.1 Notations Used Notation Description q a large prime number Fq nite eld E/Fq elliptic curve de ned on Fq G, G1 cyclic additive group composed of the points on E/Fq G2 cyclic multiplicative group composed of the points on E/Fq P generator of G e admissible bilinear map e : G1 G1 G2 Hi( )(1 i n) secure one-way hash functions k security parameter param system parameters Ui A mobile node Un The powerful node IDi Identity of node Ui(1 i n) n number of participants C Challenger, who is authoritative to respond adversary s query A Adversary attempts to solve CDHP, its advantage AdvG(A) := Prob[A(q, G, P, X, Y ) = CDH(X, Y )] is negligible in . We say that the (t, )-CDH assumption holds in group G if there is no algorithm which takes at most t running time and can solve CDHP with at least a non-negligible advantage . 2.3. AGKA Protocol. Let there are total n participants U1, U2, , Un and any subset with (n 2) can run the protocol ( ). Each participant is provided a (public, private) key pair. In a protocol, we refer by session a running instance. Each participant is allowed to run multiple sessions concurrently. An ith instance of the protocol is represented as i U, where U is the corresponding user or participant. We de ne two identities - the session identity sidi U which is the session dependent information computed by user U at it s ith instance using the shared information in that session, and the partner identity pidi U which is a set of identities of the participants who are involved in generation of the session key with i U . We say an instance i U accepts when it computes a valid session key sk. We say instances i U and j U (for i U = j U ) are partnered i (i) they have both accepted (ii) sidi U = sidj U (iii) pidi U = pidj U . We further de ne the term freshness. Definition 2.3 (Freshness). An instance i U is referred to be fresh if it satis es the following conditions: 1. If the instance i U is accepted, neither Ui nor any of its partnered instances, can query Reveal key oracle. 2. No participant is allowed to query Corrupt and Reveal Ephemeral Key simultaneously. 3. In a partnered instance between Ui and Uj, if an adversary A corrupts Uj, any message sent from Uj to Ui must actually come from Uj. 2.4. Security Model for AGKA Protocol. We analyze the security of proposed protocol within the standard security frame of indistinguishability. For the purpose we de ne the following experiment between the challenger C and the adversary A: Setup: On input a security parameter 1 , the challenger C runs KeyGen(1 ) to generate the public parameter Params and the system key pair (pk, msk) and gives the adversary A the public key pk. msk is the master secret of the system. Queries: A can adaptively make the following queries: Execute( i U): Any time the adversary A can query for the complete transcripts of an honest execution among the users selected by himself. Send( i U, m): During the normal execution of the protocol, this query returns the reply generated by instance i U. Reveal Key ( i U): When the oracle is accepted, this query outputs the group session key. 96 S. Bala, G. Sharma, H. Bansal, T. Bhatia Corrupt(Ui): This query models the reveal of long-term secret key. The participant is honest i adversary A has not made any Corrupt query. Ephemeral Key Reveal( i U): This query models the reveal of ephemeral key of participant Ui for instance i U. Test( i U): This query can be made only once during the execution of protocol . The challenger responds with a session key. Challenge: During the Test query, the challenger randomly selects a bit b $ {0, 1} and returns the real session key if b = 0 or a random value if b = 1. Guess: A outputs its guess b for b. The adversary succeeds in breaking the security if b = b. We denote this event by SuccA and de ne A s advantage as AdvA(1k) def = |2Pr[SuccA] 1|. Definition 2.4 (AKE-Security). Let Aake be an adversary against AKE-security. It is allowed to make queries to the Execute, Send, RevealKey, Ephemeral Key Reveal, Corrupt oracles. It is allowed to make a single Test query to the instance i U at the end of the phase and given the challenge session key skch,b (depending on bit b). Finally Aake outputs a bit b and wins the game if (1)b = b and (2) the instance i U is fresh till the end of the game. The advantage of Aake is AdvAake = |2Pr[SuccAake] 1|. The protocol is called AKE-secure if the adversary s advantage AdvAake is negligible. Below we recall the MA-security considering both types of adversaries, outsiders and insiders. Definition 2.5 (MA-security with outsider KCIR). Let Ama,out be an outsider adversary against MA- security. Let pidi U be a set of identities of participant in the group with whom i U wishes to establish a session key and sidi U denotes a session id of an instance i U. Ama,out is allowed to make queries to the Execute, Send, RevealKey, EphemeralKey Reveal, Corrupt oracles. Ama,out breaks the MA-security with outsider KCIR notion if at some point there is an uncorrupted instance i U with the key ski U and another party U which is uncorrupted when i U accepts such that there are no other insiders in pidi U and the following conditions hold: there is no instance i U with (pidi U , sidi U ) = (pidi U, sidi U) or, there is an instance i U with (pidi U , sidi U ) = (pidi U, sidi U) which has accepted with ski U = ski U. Definition 2.6 (MA-security with insider KCIR). Let Ama,in be an insider adversary against MA-security. It is allowed to query Execute, Send, RevealKey, EmphemeralKey Reveal and Corrupt oracles. It breaks the MA- security with insider KCIR if at some point there is an uncorrupted instance i U which has accepted with the secret key ski U and another party U which is uncorrupted when i U accepts and there is no instance i U with (pidi U , sidi U ) = (pidi U, sidi U) or, there is an instance i U with (pidi U , sidi U ) = (pidi U, sidi U) which has accepted with ski U = ski U. 3. Review of Tan s Identity-based Authenticated Group Key Agreement Protocol. This section reviews the Tan s pairing-free ID-AGKA protocol for imbanced mobile networks. Tan s pairing-free ID-AGKA protocol consists of ve phases namely, Setup phase, Key extraction phase, Key agreement phase, Remove phase and Join phase. The notions used throughout the paper are listed in Table...... Setup: For a given security parameter k, PKG does the following: Choose a k-bit prime q and generate a group G over the elliptic curve, where P is the generator of the group of prime order q. Choose the master key x Z q and compute the system public key Ppub = xP. Choose cryptographic hash functions as follows: H0 : {0, 1} G G Zq {0, 1}k H1 : {0, 1} G Zq H2 : {0, 1} G G Zq H3 : {0, 1} Zq H4 : {0, 1} G G Zq Publish the system parameters G, Fq, q, P, H0( ), H1( ), H2( ), H3( ), H4( ), Ppub. Key Extraction: Public key generator extracts the secret key of Ui with identi er IDi as follows: Choose a number ri Z q and compute Ri = riP. Compute a Schnorr signature [17] about the identity IDi as xi = ri + xH1(IDi, Ri). On the Security of Authenticated Group Key Agreement Protocols 97 Ui checks if xiP = Ri + H1(IDi, Ri)Ppub. If the equality holds, Ui takes (xi, Ri) as the private long-term key. Key Agreement: Each node Ui(1 i n 1) randomly selects two numbers ai, bi Z q and computes Ti = aixiP, Vi = biP, si = bi + xiH2(IDi, Ti, Vi) mod q. Next Ui sends the message (IDi, Ti, Vi, Ri, si) to the powerful node Un. Upon receiving the message (IDi, Ti, Vi, Ri, si), Un executes the following operations: Compute Pi = Ri + H1(IDi, Ri)Ppub and check if siP = Vi + H2(IDi, Ti, Vi)Pi holds. If it holds, Un authenticates Ui. Choose two random numbers an, bn Z q and compute the following: Tn = H3(an||xn)P, Vn = bnP, Zi = H3(an||xn)Ti(1 i n 1), sn = bn + xnH4(IDn||Z1||Z2|| ||Zn 1||Vn||Tn) mod q Broadcast the message (IDn, Vn, Rn, sn, Z1, Z2, , Zn 1) to the group U. Compute the session key SK = H0(ID, Z, Tn, sn), where ID = ID1||ID2|| ||IDn 1||IDn, Z = Z1||Z2|| ...|n 1. Each Ui computes Pn = Rn+H1(IDn, Rn)Ppub, T = (aixi)1Zi, and checks if snP = Vn+H4(IDn, Z, Vn, T)Pn mod q. If it is valid, Ui computes the group session key SK = H0(ID, Z, T, sn). 3.1. Our Attack and Fix. Recall that, when the leakage of ephemeral secret is included in the security model, the leakage of these short term secrets should not allow the adversary to compute the session key. In Tan s protocol, the leakage of ai and bi will allow the adversary to nd long term secret key from the signature. The adversary can compute xi as xi = (H2(IDi, Ti, Vi)) 1(si bi)modq. The adversary computes T = (aixi) 1Zi where Zi can be easily eavesdropped from the transcript. The ses- sion key can be computed as SK = H0(ID, Z, T, sn), where ID = ID1||ID2|| ||IDn 1||IDn and Z = Z1||Z2|| ||Zn 1. To x the above attack, one solution is to use a signature such that the leakage of private key can be avoided on the leakage of ephemeral secrets while other solution suggests to mask the ephemeral secret. The masking can be done by a simple substitution bi = H5(bi, xi), where H5 : Z q Z q Z q. Now, the leakage of ephemeral secrets ai and bi will not allow the adversary to compute xi from the signature. 4. Gupta and Biswas ECC-based AGKA Protocol. In this section, we rst present the AGKA protocol by Gupta and Biswas and then, we discuss about the security vulnerabilities in their proposal. The protocol is insecure against insider colluding attack and ephemeral key leakage attack. The algorithm steps are as follows: Setup(1 ) : On input security parameter 1 , this phase outputs the system parameters Params in the following steps: Chooses an elliptic curve group G1 of prime order q . Let P be a generator of group G. Let e be an admissible bilinear map e : G1 G1 G2, where G2 is a multiplicative group. Chooses cryptographic hash functions H0 : {0, 1} G2, H1 : G1 G2 Z q. Finally publishes the system parameters Params = {G1, G2, q, P, H0( ), H1( ), e}. KeyGen(params, IDi) : The phase performs the following for all the group members: Each party Pi publishes her public key PUi = siP and computes her private key as PRi = si si + QUi P, where QUi = H0(IDi) and si Z q is a randomly selected master key of each party Pi. Key Agreement(xi, pid) : In this phase, all the participating group members P1, P2, , Pn have their indexes in cyclic form and also, all the members have already received their public/private key pairs. The steps for key agreement protocol are as follows: Round 1: Each party Pi(1 i n) chooses a random ri Z q and computes i = riP and hi = H1( i, ri). Each Party computes the signature on hi as i = hiPRi and broadcasts i, h 1 i , i . On receiving these signatures j, h 1 j , j , all participants verify as e( j, h 1 j QIDj) = e(PUj, P), where QIDj = H0(IDj)P + PUj. 98 S. Bala, G. Sharma, H. Bansal, T. Bhatia Round 2: On successful veri cation, each Pi computes Xi = ri( i+1 i 1) and broadcast to all other participants. Key Computation : Each party computes the shared group key as Ki = nri i 1 + Yi = (r1r2 + r2r3 + ... + rnr1)P where Yi = (n 1)Xi + (n 2)Xi+1 + ... + Xi 2. 4.1. Our Attacks. Here, we list some attacks on the above protocol and prove that the protocol is not secure. The attack points are as follows: Key Generation Flaw: In this protocol, it is ambiguous to derive the public/private key pair by the par- ticipant itself. Usually, there are three cryptosystems in practice, Public Key Infrastructure (PKI), Identity based Cryptosystem (IBC) and Certi cateless Cryptosystem (CL-PKC). In all the cryptosys- tems, the private key is partially or fully generated by the trusted third party. If the user can derive the public/private key pair by themselves, there will be no authentication because an adversary can do the same and hence, anyone becomes a valid member in any communication. Insider Colluding Attack: The presented protocol is also vulnerable to insider colluding attack. Two insiders Pi 1 and Pi+1 can collude together to impersonate the participant Pi in any other group. The malicious participants eavesdrop the transcript i, h 1 i , i from the previous session and replay this in a new group. Further, note that the computation of Xi in Round 2 can be easily performed by Pi+1 and Pi 1. Xi = ri( i+1 i 1) = ri i+1 ri i 1 = ri+1 i ri 1 i The common group key can be computed as Ki = nri 1 i + Yi where Yi = (n 1)Xi + (n 2)Xi+1 + ... + Xi 2. Therefore, any two malicious insiders can impersonate a participant without his consensus and agree upon some session key. The adversary in our attack must be an active adversary which has the privilege to call Send oracle in standard security model. Ephemeral Key Leakage Attack: Another drawback of the scheme is, the leakage of ephemeral key directly compromises the group session key. However, the authors claim in Theorem 7.9 [10], the session key resistance against the leakage of session speci c temporary information but the given session key formula Ki = nri i 1 + Yi is completely dependent on ri. 5. Conclusion. In this paper, we analyze two AGKA protocols against the claimed security notions and we found them insecure. The Gupta and Biswas protocol is vulnerable to ESL attack as well as insider colluding attack while the Tan s AGKA protocol is ESL insecure. We also present a x to the Tan s protocol. REFERENCES [1] R. Barua, R. Dutta, and P. Sarkar, Extending joux s protocol to multi party key agreement, in Indocrypt, vol. 2904, Springer, 2003, pp. 205 217. [2] M. Bellare and P. Rogaway, Entity authentication and key distribution., in Crypto, vol. 93, Springer, 1993, pp. 232 249. [3] E. Bresson, O. Chevassut, and D. Pointcheval, Provably authenticated group di e-hellman key exchange-the dynamic case, in Asiacrypt 2001, vol. 2248, Springer, 2001, pp. 290 309. [4] , Dynamic group di e-hellman key exchange under standard assumptions, in Advances in CryptologyEUROCRYPT 2002, Springer, 2002, pp. 321 336. [5] E. Bresson, O. Chevassut, D. Pointcheval, and J.-J. Quisquater, Provably authenticated group di e-hellman key exchange, in Proceedings of the 8th ACM conference on Computer and Communications Security, ACM, 2001, pp. 255 264. [6] M. Burmester and Y. Desmedt, A secure and e cient conference key distribution system, in Workshop on the Theory and Application of of Cryptographic Techniques, Springer, 1994, pp. 275 286. On the Security of Authenticated Group Key Agreement Protocols 99 [7] K. Y. Choi, J. Y. Hwang, and D. H. Lee, E cient id-based group key agreement with bilinear maps, in PKC 2004, Springer, 2004, pp. 130 144. [8] W. Diffie and M. Hellman, New directions in cryptography, IEEE transactions on Information Theory, 22 (1976), pp. 644 654. [9] M. C. Gorantla, C. Boyd, and J. M. G. Nieto, Modeling key compromise impersonation attacks on group key exchange protocols, in PKC 2009, Springer, 2009, pp. 105 123. [10] D. S. Gupta and G. Biswas, An ecc-based authenticated group key exchange protocol in ibe framework, International Journal of Communication Systems. [11] I. Ingemarsson, D. Tang, and C. Wong, A conference key distribution system, IEEE Transactions on Information theory, 28 (1982), pp. 714 720. [12] S. H. Islam and G. Biswas, A pairing-free identity-based authenticated group key agreement protocol for imbalanced mobile networks, Annals of t el ecommunications-annales des telecommunications, 67 (2012), pp. 547 558. [13] A. Joux, A one round protocol for tripartite di e hellman, in International algorithmic number theory symposium, Springer, 2000, pp. 385 393. [14] J. Katz and J. S. Shin, Modeling insider attacks on group key-exchange protocols, in Proceedings of the 12th ACM conference on Computer and communications security, ACM, 2005, pp. 180 189. [15] J. Katz and M. Yung, Scalable protocols for authenticated group key exchange., in Crypto, vol. 3, Springer, 2003, pp. 110 125. [16] S. Kyung-Ah, Further analysis of id-based authenticated group key agreement protocol from bilinear maps, IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, 90 (2007), pp. 295 298. [17] C.-P. Schnorr, E cient identi cation and signatures for smart cards, in Conference on the Theory and Application of Cryptology, Springer, 1989, pp. 239 252. [18] G. Sharma, R. A. Sahu, V. Kuchta, O. Markowitch, and S. Bala, Authenticated Group Key Agreement Protocol Without Pairing, in International Conference on Information and Communications Security, Springer, 2017, pp. 606 618. [19] K. Sharma and B. Gupta, Attack in smartphone wi- access channel: State of the art, current issues, and challenges, in Next-Generation Networks, Springer, 2018, pp. 555 561. [20] , Taxonomy of distributed denial of service (ddos) attacks and defense mechanisms in present era of smartphone devices, International Journal of E-Services and Mobile Applications (IJESMA), 10 (2018), pp. 58 74. [21] M. Steiner, G. Tsudik, and M. Waidner, Key agreement in dynamic peer groups, IEEE Transactions on Parallel and Distributed Systems, 11 (2000), pp. 769 780. [22] Z. Tan, An e cient pairing-free identity-based authenticated group key agreement protocol, International Journal of Commu- nication Systems, 28 (2015), pp. 534 545. [23] Y.-M. Tseng, T.-T. Tsai, and S.-S. Huang, Enhancement on strongly secure group key agreement, Security and Commu- nication Networks, 8 (2015), pp. 126 135. [24] F. Wei, Y. Wei, and C. Ma, Attack on an id-based authenticated group key exchange protocol with identifying malicious participants., IJ Network Security, 18 (2016), pp. 393 396. [25] T.-Y. Wu, T.-T. Tsai, and Y.-M. Tseng, A provably secure revocable id-based authenticated group key exchange protocol with identifying malicious participants, The Scienti c World Journal, 2014 (2014). [26] T.-Y. Wu and Y.-M. Tseng, Towards id-based authenticated group key exchange protocol with identifying malicious partic- ipants, Informatica, 23 (2012), pp. 315 334. [27] T.-Y. Wu, Y.-M. Tseng, and T.-T. Tsai, A revocable id-based authenticated group key exchange protocol with resistant to malicious participants, Computer Networks, 56 (2012), pp. 2994 3006. [28] T.-Y. Wu, Y.-M. Tseng, and C.-W. Yu, A secure id-based authenticated group key exchange protocol resistant to insider attacks., J. Inf. Sci. Eng., 27 (2011), pp. 915 932. [29] F. Zhang and X. Chen, Attack on an id-based authenticated group key agreement scheme from pkc 2004, Information Processing Letters, 91 (2004), pp. 191 193. [30] J. Zhao, D. Gu, and M. C. Gorantla, Stronger security model of group key agreement, in Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, ACM, 2011, pp. 435 440. Edited by: Khaleel Ahmad Received: Sep 13, 2018 Accepted: Feb 20, 2019