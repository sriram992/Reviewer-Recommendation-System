arXiv:1311.6107v3 [cs.SY] 11 May 2014 IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 1 Off-policy Reinforcement Learning for H Control Design Biao Luo, Huai-Ning Wu and Tingwen Huang Abstract The H control design problem is considered for nonlinear systems with unknown internal system model. It is known that the nonlinear H control problem can be trans- formed into solving the so-called Hamilton-Jacobi-Isaacs (HJI) equation, which is a nonlinear partial differential equation that is generally impossible to be solved analytically. Even worse, model- based approaches cannot be used for approximately solving HJI equation, when the accurate system model is unavailable or costly to obtain in practice. To overcome these dif culties, an off-policy reinforcement leaning (RL) method is introduced to learn the solution of HJI equation from real system data instead of mathematical system model, and its convergence is proved. In the off-policy RL method, the system data can be generated with arbitrary policies rather than the evaluating policy, which is extremely important and promising for practical systems. For implementation purpose, a neural network (NN) based actor-critic structure is employed and a least-square NN weight update algorithm is derived based on the method of weighted residuals. Finally, the developed NN-based off-policy RL method is tested on a linear F16 aircraft plant, and further applied to a rotational/translational actuator system. Index Terms H control design; Reinforcement learning; Off-policy learning; Neural Network; Hamilton-Jacobi-Isaacs equation. I. INTRODUCTION R EINFORCEMENT learning (RL) is a machine learn- ing technique that has been widely studied from the computational intelligence and machine learning scope in the arti cial intelligence community [1] [4]. RL technique refers to an actor or agent that interacts with its environment and aims to learn the optimal actions, or control policies, by Manuscript received November 24, 2013; revised March 28, 2014 and April 2, 2014; accepted April 18, 2014. This work was supported in part by the National Basic Research Program of China under 973 Program of Grant 2012CB720003, in part by the National Natural Science Foundation of China under Grant 61121003, and in part by the General Research Fund project from Science and Technology on Aircraft Control Laboratory of Beihang University under Grant 9140C480301130C48001. This publication was also made possi- ble by NPRP grant # NPRP 4-1162-1-181 from the Qatar National Research Fund (a member of Qatar Foundation). The statements made herein are solely the responsibility of the authors. This paper was recommended by Associate Editor H. M. Schwartz. Biao Luo is with the Science and Technology on Aircraft Control Labo- ratory, Beihang University (Beijing University of Aeronautics and Astronau- tics), Beijing 100191, P. R. China. He is also with State Key Laboratory of Management and Control for Complex Systems, Institute of Automa- tion, Chinese Academy of Sciences, Beijing 100190, P. R. China (E-mail: biao.luo@hotmail.com). Huai-Ning Wu is with the Science and Technology on Aircraft Control Laboratory, Beihang University (Beijing University of Aeronautics and As- tronautics), Beijing 100191, P. R. China (E-mail:whn@buaa.edu.cn). Tingwen Huang is with the Texas A& M University at Qatar, PO Box 23874, Doha, Qatar (E-mail: tingwen.huang@qatar.tamu.edu). Digital Object Identi er 10.1109/TCYB.2014.2319577 observing their responses from the environment. In [2], Sutton and Barto suggested a de nition of RL method, i.e., any method that is well suited for solving RL problem can be regarded as a RL method, where the RL problem is de ned in terms of optimal control of Markov decision processes. This obviously established the relationship between the RL method and control community. Moreover, RL methods have the ability to nd an optimal control policy from unknown environment, which makes RL a promising method for control design of real systems. In the past few years, many RL approaches [5] [23] have been introduced for solving the optimal control problems. Especially, some extremely important results were reported by using RL for solving the optimal control problem of discrete-time systems [7], [10], [14], [17], [18], [22]. Such as, Liu and Wei suggested a nite-approximation-error based iterative adaptive dynamic programming approach [17], and a novel policy iteration (PI) method [22] for discrete-time nonlinear systems. For continuous-time systems, Murray et al. [5] presented two PI algorithms that avoid the necessity of knowing the internal system dynamics. Vrabie et al. [8], [9], [13] introduced the thought of PI and proposed an important framework of integral reinforcement learning (IRL). Modares et al. [21] developed an experience replay based IRL algorithm for nonlinear partially unknown constrained-input systems. In [19], an online neural network (NN) based decentralized control strategy was developed for stabilizing a class of continuous-time nonlinear interconnected large-scale systems. In addition, it worth mentioning that the thought of RL methods have also been introduced to solve the optimal control problem of partial differential equation systems [6], [12], [15], [16], [23]. However, for most of practical real systems, the existence of external disturbances is usually unavoidable. To reduce the effects of disturbance, robust controller is required for disturbance rejection. One effective solution is the H control method, which achieves disturbance attenuation in the L2-gain setting [24] [26], that is, to design a controller such that the ratio of the objective output energy to the disturbance energy is less than a prescribed level. Over the past few decades, a large number of theoretical results on nonlinear H control have been reported [27] [29], where the H control problem can be transformed into how to solve the so-called Hamilton-Jacobi-Isaacs (HJI) equation. However, the HJI equation is a nonlinear partial differential equation (PDE), which is dif cult or impossible to solve, and may not have global analytic solutions even in simple cases. Thus, some works have been reported to solve the HJI equa- tion approximately [27], [30] [35]. In [27], it was shown that IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 2 there exists a sequence of policy iterations on the control input such that the HJI equation is successively approximated with a sequence of Hamilton-Jacobi-Bellman (HJB)-like equations. Then, the methods for solving HJB equation can be extended for the HJI equation. In [36], the HJB equation was succes- sively approximated by a sequence of linear PDEs, which were solved with Galerkin approximation in [30], [37], [38]. In [39], the successive approximation method was extended to solve the discrete-time HJI equation. Similar to [30], a policy iteration scheme was developed in [31] for the constrained input system. For implementation purpose of this scheme, a neuro-dynamic programming approach was introduced in [40] and an online adaptive method was given in [41]. This approach suits for the case that the saddle point exists, thus a situation that the smooth saddle point does not exist was considered in [42]. In [32], a synchronous policy iteration method was developed, which is the extension of the work [43]. To improve the ef ciency for computing the solution of HJI equation, Luo and Wu [44] proposed a computation- ally ef cient simultaneous policy update algorithm (SPUA). In addition, in [45] the solution of the HJI equation was approximated by the Taylor series expansion, and an ef cient algorithm was furnished to generate the coef cients of the Tay- lor series. It is observed that most of these methods [27], [30] [33], [35], [40], [44], [45] are model-based, where the full system model is required. However, the accurate system model is usually unavailable or costly to obtain for many practical systems. Thus, some RL approaches have been proposed for H control design of linear systems [46], [47] and nonlinear systems [48] with unknown internal system model. But these methods are on-policy learning approaches [32], [41], [46] [49], where the cost function should be evaluated by using system data generated with policies being evaluated. It is found that there are several drawbacks (to be discussed in Section III) to apply the on-policy learning to solve real H control problem. To overcome this problem, this paper introduces an off- policy RL method to solve the nonlinear continuous-time H control problem with unknown internal system model. The rest of the paper is rearranged as follows. Sections II and III present the problem description and the motivation. The off-policy learning methods for nonlinear systems and linear systems are developed in IV and V respectively. The simulation studies are conducted in Section VI and a brief conclusion is given in Section VII. Notations: R, Rn and Rn m are the set of real numbers, the n-dimensional Euclidean space and the set of all real matrices, respectively. denotes the vector norm or matrix norm in Rn or Rn m , respectively. The superscript T is used for the transpose and I denotes the identify matrix of appropriate dimension. / x denotes a gradient operator notation. For a symmetric matrix M, M > ( )0 means that it is a positive (semi-positive) de nite matrix. v 2 M vT Mv for some real vector v and symmetric matrix M > ( )0 with appropriate dimensions. C1(X) is function space on X with rst derivatives are continuous. L2[0, ) is a Banach space, for w(t) L2[0, ), R 0 w(t) 2dt < . Let X, U and W be compact sets, denote D {(x, u, w)|x X, u U, w W}. For column vector functions s1(x, u, w) and s2(x, u, w) , where (x, u, w) D de ne inner product s1(x, u, w), s2(x, u, w) D R D sT 1 (x, u, w)s2(x, u, w)d(x, u, w) and norm s1(x, u, w) D  R D sT 1 (x, u, w)s1(x, u, w)d(x, u, w) 1/2. Hm,p(X) is a Sobolev space that consists of functions in space Lp(X) such that their derivatives of order at least m are also in Lp(X). II. PROBLEM DESCRIPTION Let us consider the following af ne nonlinear continuous- time dynamical system: x(t) = f(x(t)) + g(x(t))u(t) + k(x(t))w(t) (1) z(t) = h(x) (2) where [x1 ... xn]T X Rn is the state, u = [u1 ... um]T U Rm is the control input and u(t) L2[0, ), w = [w1 ... wq]T W Rq is the external disturbance and w(t) L2[0, ), z = [z1 ... zp]T Rp is the objective output. f(x) is Lipschitz continuous on a set X that contains the origin, f(0) = 0. f(x) represents the internal system model which is assumed to be unknown in this paper. g(x), k(x) and h(x) are known continuous vector or matrix functions of appropriate dimensions. The H control problem under consideration is to nd a state feedback control law u(x) such that the system (1) is closed-loop asymptotically stable, and has L2-gain less than or equal to , that is, Z 0   z(t) 2 + u(t) 2 R  dt 2 Z 0 w(t) 2dt (3) for all w(t) L2[0, ), R > 0 and > 0 is some prescribed level of disturbance attenuation. From [27], this problem can be transformed to solve the so-called HJI equation, which is summarized in Lemma 1. Lemma 1. Assume the system (1) and (2) is zero-state observable. For > 0 , suppose there exists a solution V (x) to the HJI equation [ V (x)]T f(x) + hT (x)h(x) 1 4[ V (x)]T g(x)R 1gT (x) V (x) + 1 4 2 [ V (x)]T k(x)kT (x) V (x) = 0. (4) where V (x) C1(X), V (x) 0 and V (0) = 0. Then, the closed-loop system with the state feedback control u(t) = u (x(t)) = 1 2R 1gT(x) V (x) (5) has L2-gain less than or equal to , and the closed-loop sys- tem (1), (2) and (5) (when w(t) 0 ) is locally asymptotically stable. III. MOTIVATION FROM INVESTIGATION OF RELATED WORK From Lemma 1, it is noted that the H control (5) relies on the solution of the HJI equation (4). Therefore, a model-based IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 3 iterative method was proposed in [30], where the HJI equation is successively approximated by a sequence of linear PDEs: [ V (i,j+1)]T (f + gu(i) + kw(i,j)) + hT h + u(i) 2 R 2 w(i,j) 2 = 0 (6) and then update control and disturbance policies with w(i,j+1) 1 2 2kT V (i,j+1) (7) u(i+1) 1 2R 1gT V (i+1) (8) with V (i+1) lim j V (i,j). From [27], [30], it was indicated that the V (i,j) can converge to the solution of the HJI equation, i.e., lim i,j V (i,j) = V . Remark 1. Note that the key point of the iterative scheme (6)-(8) depends on the solution of the linear PDE (6). Thus, several related methods were developed, such as, Galerkin approximation [30], synchronous policy iteration [32], neuro- dynamic programming approach [31], [40] and online adap- tive control method [41] for constrained input systems, and Galerkin approximation method for discrete-time systems [39]. Obviously, the iteration (6)-(8) will generate two iterative loops since the control and disturbance policies are updated at the different iterative steps, i.e., the inner loop for updating disturbance policy w with index j, and the outer iterative loop for updating control policy u with index i. The outer loop will not be activated until the inner loop is convergent, which results in low ef ciency. Therefore, Luo and Wu [44] proposed a simultaneous policy update algorithm (SPUA), where the control and disturbance policies are updated at the same iterative step, and thus only one iterative loop is required. It worth noting that the word simultaneous in [44] and the word synchronous/simultaneous in [32], [41] represent different meanings. The former emphasizes the same iterative step, while the latter emphasizes the same time instant . In other words, the SPUA in [44] updates control and disturbance policies at the same iterative step, while the algorithms in [32], [41] update control and disturbance policies at the different iterative steps. The procedure of model-based SPUA is given in Algorithm 1. Algorithm 1. Model-based SPUA. Step 1: Give an initial function V (0) V0 (V0 V is determined by Lemma 5 in [44]. Let i = 0 ; Step 2: Update the control and disturbance policies with u(i) 1 2R 1gT V (i) (9) w(i) 1 2 2kT V (i) (10) Step 3: Solve the following linear PDE for V (i+1)(x) : [ V (i+1)]T (f + gu(i) + kw(i)) + hT h + u(i) 2 R 2 w(i) 2 = 0; (11) where V (i+1)(x) C1(X), V (i+1)(x) 0 and V (i+1)(0) = 0. Step 4: Let i = i + 1, go back to Step 2 and continue. It worth noting that Algorithm 1 is an in nite iterative procedure, which is used for theoretical analysis rather than for implementation purpose. That is to say, Algorithm 1 will converge to the solution of the HJI equation (4) when the iteration goes to in nity. By constructing a xed point equation, the convergence of Algorithm 1 is established in [44] by proving that it is essentially a Newtons iteration method for nding the xed point. With the increase of index i, the sequence V (i) obtained by the SPUA with equations (9)- (11) can converge to the solution of HJI equation (4), i.e., lim i V (i) = V . Remark 2. It is necessary to explain the rationale of using equations (9) and (10) for control and disturbance policies update. The H control problem (1)-(3) can be viewed as a two-players zero-sum differential game problem [26], [32] [34], [40], [41], [47]. The game problem is a minimax problem, where the control policy u acts as the minimizing player and the disturbance policy w is the maximizing player. The game problem aims at nding the saddle point (u , w ), where u is given by expression (5) and w is given by w (x) 1 2 2kT (x) V (x). Correspondingly, for the H control problem (1)-(3), u and w are the associated H control policy and the worst disturbance signal [26], [31], [32], [34], [40], [47], respectively. Thus, it is reasonable using expressions (9) and (10) (that are consistent with u and w in form) for control and disturbance policies update. Similar control and disturbance policy update method could be found in references [27], [30], [31], [34], [40], [41]. Observe that both iterative equations (6) and (11) require the full system model. For the H control problem that the internal system dynamic f(x) is unknown, data based methods [47], [48] were suggested to solve the HJI equation online. However, most of related existing online methods are on- policy learning approaches [32], [41], [47] [49]. From the de nition of on-policy learning [2], the cost function should be evaluated with the data generated from the evaluating policies. For example, V (i,j+1) in equation (6) is the cost function of the policies w(i,j) and u(i), which means that V (i,j+1) should be evaluated with system data by using evaluating policies w(i,j) and u(i). It is observed that these on-policy learning approaches for solving the H control problem have several drawbacks: 1) For real implementation of on-policy learning methods [32], [41], [48], [49], the approximate evaluating control and disturbance policies (rather than the actual policies) are used to generate data for learning their cost function. In other words, the on-policy learning methods using the inaccurate data to learn their cost function, which will increase the accumulated error. For example, to learn the cost function V (i,j+1) in equation (6), some approximate policies bw(i,j) and bu(i) (rather than its actual policies w(i,j) and u(i), which are usually unknown because of IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 4 estimate error) are employed to generate data; 2) The evaluating control and disturbance policies are required to generate data for on-policy learning, thus disturbance signal should be adjustable, which is usually impractical for most of real systems; 3) It is known [2], [50] that the issue of exploration is extremely important in RL for learning the optimal control policy, and the lack of exploration during the learning process may lead to divergency. Nevertheless, for on-policy learning, exploration is restricted because only the evaluating policies can be used to generate data. From the literature investigation, it is found that the exploration issue is rarely discussed in existing work that using RL techniques for control design; 4) The implementation structure is complicated, such as in [32], [41], three NNs are required for approximating cost function, control and disturbance policies, respec- tively; 5) Most of existing approaches [32], [41], [47] [49] are implemented online, thus they are dif cult for real-time control because the learning process is often time-consuming. Furthermore, online control design ap- proaches just use current data while discard past data, which implies that the measured system data is used only once and thus results in low utilization ef ciency. To overcome the drawbacks mentioned above, we propose an off-policy RL approach to solve the H control problem with unknown internal system dynamic f(x). IV. OFF-POLICY REINFORCEMENT LEARNING FOR H CONTROL In this section, an off-policy RL method for H control design is derived and its convergence is proved. Then, a NN- based critic-actor structure is developed for implementation purpose. A. Off-policy reinforcement learning To derive the off-policy RL method, we rewrite the system (1) as: x = f + gu(i) + kw(i) + g[u u(i)] + k[w w(i)]. (12) for u U, w W. Let V (i+1)(x) be the solution of the linear PDE (11), then taking derivative along the state of system (12) yields, dV (i+1)(x) dt = [ V (i+1)]T (f + gu(i) + kw(i)) + [ V (i+1)]T g[u u(i)] + [ V (i+1)]T k[w w(i)]. (13) With the linear PDE (11), conducting integral on both sides of equation (13) in time interval [t, t + t] and rearranging terms yield, Z t+ t t [ V (i+1)(x( ))]T g(x( ))[u( ) u(i)(x( ))]d + Z t+ t t [ V (i+1)(x( ))]T k(x( ))[w( ) w(i)(x( ))]d + V (i+1)(x(t)) V (i+1)(x(t + t)) = Z t+ t t  hT (x( ))h(x( )) + u(i)(x( )) 2 R 2 w(i)(x( )) 2 d (14) It is observed from the equation (14) that the cost function V (i+1) can be learned by using arbitrary input signals u and w, rather than the evaluating policies u(i) and w(i). Then, replacing linear PDE (11) in Algorithm 1 with (14) results in the off-policy RL method. To show its convergence, Theorem 1 establishes the equivalence between iterative equations (11) and (14). Theorem 1. Let V (i+1)(x) C1(X), V (i+1)(x) 0 and V (i+1)(0) = 0. V (i+1)(x) is the solution of equation (14) iff (if and only if ) it is the solution of the linear PDE (11), i.e., equation (14) is equivalent to the linear PDE (11). Proof. From the derivation of equation (14), it is concluded that if V (i+1)(x) is the solution of the linear PDE (11), then V (i+1)(x) also satis es equation (14). To complete the proof, we have to show that V (i+1)(x) is the unique solution of equation (14). The proof is by contradiction. Before starting the contradiction proof, we derive a simple fact. Consider lim t 0 1 t Z t+ t t ( )d = lim t 0 1 t Z t+ t 0 ( )d Z t 0 ( )d ! = d dt Z t 0 ( )d = (t). (15) From (14), we have dV (i+1)(x) dt = lim t 0 1 t h V (i+1)(x(t + t)) V (i+1)(x(t)) i = lim t 0 1 t Z t+ t t [ V (i+1)(x( ))]T g(x( )) [u( ) u(i)(x( ))]d + lim t 0 1 t Z t+ t t [ V (i+1)(x( ))]T k(x( )) [w( ) w(i)(x( ))]d lim t 0 1 t Z t+ t t h hT (x( ))h(x( )) + u(i)(x( )) 2 R 2 w(i)(x( )) 2i d . (16) By using the fact (15), the equation (16) is rewritten as dV (i+1)(x) dt = [ V (i+1)(x(t))]T g(x(t))[u(t) u(i)(x(t))] + [ V (i+1)(x(t))]T k(x(t))[w(t) w(i)(x(t))] h hT (x(t))h(x(t)) + u(i)(x(t)) 2 R 2 w(i)(x(t)) 2i . (17) Suppose that W(x) C1(X) is another solution of equation (14) with boundary condition W(0) = 0. Thus, W(x) also IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 5 satis es equation (17), i.e., dW(x) dt = [ W(x(t))]T g(x(t))[u(t) u(i)(x(t))] + [ W(x(t))]T k(x(t))[w(t) w(i)(x(t))] h hT (x(t))h(x(t)) + u(i)(x(t)) 2 R 2 w(i)(x(t)) 2i . (18) Substituting equation (18) from (17) yields, d dt  V (i+1)(x) W(x)  = h  V (i+1)(x) W(x) iT g(x)[u u(i)(x)] + h  V (i+1)(x) W(x) iT k(x)[w w(i)(x)]. (19) This means that equation (19) holds for u U, w W. If letting u = u(i), w = w(i), we have d dt h V (i+1)(x) W(x) i = 0. (20) Then, V (i+1)(x) W(x) = c for x X, where c is a real constant, and c = V (i+1)(0) W(0) = 0 . Thus,V (i+1)(x) W(x) = 0, i.e., W(x) = V (i+1)(x) for x X. This completes the proof. Remark 3. It follows from Theorem 1 that the solution of equation (14) is equivalent to equation (11), and thus the convergence of the off-policy RL is guaranteed, i.e., the solution of the iterative equation (14) will converge to the solution of HJI equation (4) as iteration step i increases. Different from the equation (11) in Algorithm 1, the off- policy RL with equation (14) uses system data instead of the internal system dynamic f(x). Hence, the off-policy RL can be regarded as a direct learning method for H control design, which avoids the identi cation of f(x). In fact, the information of f(x) is embedded in the measurement of system data. That is to say, the lack of knowledge about f(x) does not have any impact on the off-policy RL to obtain the solution of HJI equation (4) and the H control policy. It worth pointing out that the equation (14) is similar with the form of the IRL [8], [9], which is an important framework for control design of continuous-time systems. The IRL in [8], [9] is an online optimal control learning algorithm for partially unknown systems. B. Implementation based on neural network To solve equation (14) for the unknown function V (i+1)(x) based on system data, we develop a NN based actor-critic structure. From the well known high-order Weierstrass ap- proximation theorem [51], a continuous function can be represented by an in nite-dimensional linearly independent basis function set. For real practical application, it is usually required to approximate the function in a compact set with a nite-dimensional function set. We consider the critic NN for approximating the cost function on a compact set X. Let (x) [ 1(x) ... L(x)]T be the vector of linearly independent activation functions for critic NN, where l(x) : X 7 R, l = 1, ..., L, L is the number of critic NN hidden layer neurons. Then, the output of critic NN is given by bV (i)(x) = L X l=1 (i) l l(x) = T (x) (i) (21) for i = 0, 1, 2, ..., where (i) [ (i) 1 ... (i) L ]T is the critic NN weight vector. It follows from (9), (10) and (21) that the disturbance and control policies are given by: bu(i)(x) = 1 2R 1gT (x) T (x) (i) (22) bw(i)(x) = 1 2 2kT (x) T (x) (i) (23) for i = 0, 1, 2, ..., and (x) [ 1/ x ... L/ x]T is the Jacobian of (x). Expressions (22) and (23) can be viewed as actor NNs for the disturbance and control policies respec- tively, where 1 2R 1gT (x) T (x) and 1 2 2kT (x) T (x) are the activation function vectors and (i) is the actor NN weight vector. Due to estimation errors of the critic and actor NNs (21)- (23), the replacement of V (i+1), w(i) and u(i) in the iterative equation (14) with bV (i+1), bw(i) and bu(i) respectively, yields the following residual error: (i)(x(t), u(t), w(t)) Z t+ t t [u( ) bu(i)(x( ))]T gT (x( )) T (x( )) (i+1)d + Z t+ t t [w( ) bw(i)(x( ))]T kT (x( )) T (x( )) (i+1)d + [ (x(t)) (x(t + t))]T (i+1) Z t+ t t h hT (x( ))h(x( )) + bu(i)(x( )) 2 R 2 bw(i)(x( )) 2i d = Z t+ t t uT ( )gT (x( )) T (x( )) (i+1)d + 1 2 Z t+ t t  (i)T (x( ))g(x( ))R 1gT (x( )) T (x( )) (i+1)d + Z t+ t t wT ( )kT (x( )) T (x( )) (i+1)d 1 2 2 Z t+ t t  (i)T (x( ))k(x( ))kT (x( )) T (x( )) (i+1)d + [ (x(t)) (x(t + t))]T (i+1) 1 4 Z t+ t t  (i)T (x( ))g(x( ))R 1gT (x( )) T (x( )) (i)d + 1 4 2 Z t+ t t  (i)T (x( ))k(x( ))kT (x( )) T (x( )) (i)d Z t+ t t hT (x( ))h(x( ))d (24) IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 6 For notation simplicity, de ne (x(t)) [ (x(t)) (x(t + t))]T g (x(t)) Z t+ t t (x( ))g(x( ))R 1gT (x( )) T (x( ))d k (x(t)) Z t+ t t (x( ))k(x( ))kT (x( )) T (x( ))d u (x(t), u(t)) Z t+ t t uT ( )gT (x( )) T (x( ))d w (x(t), w(t)) Z t+ t t wT ( )kT (x( )) T (x( ))d h(x(t)) Z t+ t t hT (x( ))h(x( ))d then, expression (24) is rewritten as (i)(x(t), u(t), w(t)) = u (x(t), u(t)) (i+1) + 1 2  (i)T g (x(t)) (i+1) + w (x(t), w(t)) (i+1) 1 2 2  (i)T k (x(t)) (i+1) + (i+1) 1 4  (i)T g (x(t)) (i) + 1 4 2  (i)T k (x(t)) (i) h(x(t)). (25) For description convenience, expression (25) is represented as a compact form (i)(x(t), u(t), w(t)) = (i)(x(t), u(t), w(t)) (i+1) (i)(x(t)) (26) where (i)(x(t), u(t), w(t)) u (x(t), u(t)) + 1 2  (i)T g (x(t)) + w (x(t), w(t)) 1 2 2  (i)T k (x(t)) + (i)(x(t)) 1 4  (i)T g (x(t)) (i) 1 4 2  (i)T k (x(t)) (i) + h(x(t)). For description simplicity, denote (i) = [ (i) 1 ... (i) L ]T . Based on the method of weighted residuals [52], the unknown critic NN weight vector (i+1) can be computed in such a way that the residual error (i)(x, u, w) (for t 0) of (26) is forced to be zero in some average sense. Thus, projecting the residual error (i)(x, u, w) onto d (i)/d (i+1) and setting the result to zero on domain D using the inner product, , D, i.e., D d (i)/d (i+1), (i)(x, u, w) E D = 0. (27) Then, the substitution of (26) into (27) yields, D (i)(x, u, w), (i)(x, u, w) E D (i+1) D (i)(x, u, w), (i)(x) E D = 0 where the notations (i), (i) D and (i), (i) D are given by (i), (i) D D (i) 1 , (i) 1 E D D (i) 1 , (i) L E D ... ... D (i) L , (i) 1 E D D (i) L , (i) L E D and (i), (i) D h D (i) 1 , (i)E D D (i) L , (i)E D iT . Thus, (i+1) can be obtained with (i+1) = D (i)(x, u, w), (i)(x, u, w) E 1 D D (i)(x, u, w), (i)(x) E D . (28) The computation of inner products (i)(x, u, w), (i)(x, u, w) D and (i)(x, u, w), (i)(x) D involve many numerical integrals on domain D, which are computationally expensive. Thus, the Monte-Carlo integration method [53] is introduced, which is especially competitive on multi-dimensional domain. We now illustrate the Monte-Carlo integration for computing (i)(x, u, w), (i)(x, u, w) D. Let ID R D d(x, u, w), and SM {(xm, um, wm)|(xm, um, wm) D, m = 1, 2, ..., M} be the set that sampled on domain D, where M is size of sample set SM. Then, (i)(x, u, w), (i)(x, u, w) D is approximately computed with D (i)(x, u, w), (i)(x, u, w) E D = Z D  (i)(x, u, w) T (i)(x, u, w)d(x, u, w) = ID M M X m=1  (i)(xm, um, wm) T (i)(xm, um, wm) = ID M  Z(i)T Z(i) (29) where Z(i) h  (i)(x1, u1, w1) T ...   (i)(xM, uM, wM) T iT . Similarly, D (i)(x, u, w), (i)(x) E D = ID M M X m=1  (i)(xm, um, wm) T (i)(xm) = ID M  Z(i)T (i) (30) where (i)  (i)(x1) ... (i)(xM) T . Then, the substitution of (29) and (30) into (28) yields, (i+1) =  Z(i)T Z(i)  1  Z(i)T (i). (31) It is noted that the critic NN weight update rule (31) is a least-square scheme. Based on the update rule (31), the procedure for H control design with NN-based off-policy RL is presented in Algorithm 2. Remark 4. In the least-square scheme (31), it is required to compute the inverse of matrix  Z(i)T Z(i). This means that the matrix Z(i) should be full column rank, which depends IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 7 on the richness of the sampling data set SM and its size M. To attain this goal in real implementation, it would be useful by increasing the size M, starting from different initial states, and using rich input signals, such as random noises, sinusoidal function noises with enough frequencies. Of course, it would be nice, if possible but is not a necessity, to use the persistent exciting input signals, while it is still a dif cult issue [54], [55] that requires further investigation. In a word, the choices of rich input signals and the size M are generally experience- based. Algorithm 2. NN-based off-policy RL for H control design. Step 1: Collect real system data (xm, um, wm) for sample set SM, and then compute (xm), g (xm), k (xm), u (xm, um), w (xm, wm) and h(xm); Step 2: Select initial critic NN weight vector (0) such that bV (0) V0. Let i = 0; Step 3: Compute Z(i) and (i), and update (i+1) with (31); Step 4: Let i = i + 1. If (i) (i 1) ( is a small positive number), stop iteration and (i) is employed to obtain the H control policy with (22), else go back to Step 3 and continue. Note that Algorithm 2 has two parts: the rst part is Step 1 for data processing, i.e., measure system data (x, u, w) for computing , g , k , u , w and h; the second part is Steps 2-4 for of ine iterative learning the solution of the HJI equation (4). Remark 5. From Theorem 1, the proposed off-policy RL is mathematically equivalent to the model-based SPUA (i.e., Algorithm 2), which is proved to be a Newton s method [44]. Hence, the off-policy RL have the same advantages and disadvantages as the Newton s method. That is to say, the off-policy RL is a local optimization method, and thus there exists a problem that an initial critic NN weight vecotr (0) should be given such that the initial solution bV (0) locates in a neighbourhood V0 of the HJI equation (4). In fact, this problem also widely arises in many existing works for solving optimal and H control problems of either linear or nonlinear systems through the observations from computer simulation, such as [5], [8], [9], [27], [30], [31], [36], [40], [42], [56] [59]. Till present, it is still a dif cult issue for nding proper initializations or developing global approaches. There is no exception for the proposed off-policy RL algorithm, where the selection of initial weight vector (i) is still experience-based and requires further investigation. Algorithm 2 can be viewed as an off-policy learning method according to references [2], [60], [61], which overcomes the drawbacks mentioned in Section III, i.e., 1) In the off-policy RL algorithm (i.e., Algorithm 2), the control u and disturbance w can be arbitrarily on U and W, where no error occurs during the process of generating data, and thus the accumulated error (exists in the on-policy learning methods mentioned in Section III) can be reduced; 2) In the Algorithm 2, the control u and disturbance w can be arbitrarily on U and W, and thus disturbance w does not required to be adjustable; 3) In the Algorithm 2, the cost function V (i+1) of control and disturbance policies (u(i), w(i)) can be evaluated by using system data generated with other different control and disturbance signals (u, w). Thus, the obvious advan- tage of the developed off-policy RL method is that it can learn the cost function and control policy from system data that are generated according to a more exploratory or even random policies; 4) The implementation of Algorithm 2 is very simple, in fact only one NN is required, i.e., critic NN. This means that once the critic NN weight vector (i+1) is computed via (31), the action NNs for control and disturbance policies can be obtained based on (22) and (23) accordingly; 5) The developed off-policy RL method learns the H control policy of ine, which is then used for real- time control. Thus, it is much more practical than online control design methods since less computa- tional load will generate during real-time application. Meanwhile, note that in Algorithm 2, once the terms , g , k , u , w and h are computed with sam- ple set SM (i.e., Step 1 is nished), no extra data is required for learning the H control policy (in Steps 2- 4). This means that the collected data set can be utilized repeatedly, and thus the utilization ef ciency is improved compared to the online control design methods. Remark 6. Observe that the experience replay based IRL method [21] can be viewed as an off-policy method based on its de nition [2]. There are three obvious differences between the method and the work of this paper. Firstly, the method in [21] is for solving the optimal control problem without external disturbance, while the off-policy RL algorithm in this paper is for solving the H control problem with external disturbance. Secondly, the method in [21] is online adaptive control approach. The off-policy RL algorithm in this paper uses real system information, and learns the H control policy by using an of ine process. After the learning process is nished, the convergent control policy is employed for real system control. Thirdly, the method in [21] involves two NNs (i.e., one critic NN and one actor NN) for adaptive optimal control realization, while only one NN (i.e., critic NN) is required in the algorithm of this paper. C. Convergence analysis for NN-based off-policy RL It is necessary to analyze the convergence of the NN-based off-policy RL algorithm. From Theorem 1, the equation (14) in the off-policy RL is equivalent to the linear PDE (11), which means that the derived least-square scheme (31) is essentially for solving the linear PDE (11). In [57], a similar least-square method was suggested to solve the rst order linear PDE directly, wherein some theoretical results are useful IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 8 for analyzing the convergence of the proposed NN-based off- policy RL algorithm. The following Theorem 2 is given to show the convergence of critic NN and actor NNs. Theorem 2. For i = 0, 1, 2, ..., assume that V (i+1) H1,2(X) is the solution of (14), the critic NN activation functions l(x) H1,2(X), l = 1, 2, ...L are selected such that they are complete when L , V (i+1) and V (i+1) can be uniformly approximated, and the set { l(x1, x2) l(x1) l(x2)}L l=1 is linearly independent and complete for x1, x2 X, x1 = x2. Then, sup x X |bV (i+1)(x) V (i+1)(x)| 0 (32) sup x X | bV (i+1)(x) V (i+1)(x)| 0 (33) sup x X |bu(i+1)(x) u(i+1)(x)| 0 (34) sup x X | bw(i+1)(x) w(i+1)(x)| 0. (35) Proof. The proof procedure of the above results is very similar with that in reference [57], and thus some similar proof steps will be omitted for avoidance of repetition. To use the theo- retical results in [57], we rstly prove the { l(f + gu(i) + kw(i))}L l=1 is linear independent by contradiction. Assume this is not true, then there exists a vector [ 1 ... L]T = 0 such that L X l=1 l l(f + gu(i) + kw(i)) = 0 which means that for x X, Z t+ t t L X l=1 l l(f + gu(i) + kw(i))d = Z t+ t t l d l d d = L X l=1 l[ l(x(t + t)) l(x(t))] = L X l=1 l l(x(t + t), x(t)) = 0. This contradicts the fact that the set { l}L l=1 is linearly independent, which implies that the set { l(f + gu(i) + kw(i))}L l=1 is linear independent. From Theorem 1, V (i+1) is the solution of the linear PDE (11). Then, with the same procedure used in Theorem 2 and Corollary 2 of the reference [57], the results (32)-(34) can be proven. And the result (35) can be proven in a similar way for (34). The results (33)-(35) in Theorem 2 imply that the critic NN and actor NNs are convergent. In the following Theorem 3, we prove that the NN-based off-policy RL algorithm converges uniformly to the solution of the HJI equation (4) and the H control policy (5). Theorem 3. If the conditions in Theorem 2 hold, then, for > 0, i0, L0, when i i0 and L L0, we have sup x X |bV (i)(x) V (x)| < (36) sup x X |bu(i)(x) u (x)| < (37) sup x X | bw(i)(x) w (x)| < . (38) Proof. By following the same proof procedures in Theorems 3 and 4 in [57], the results (36)-(38) can be proven directly. Similar to (37), the result (38) can also be proven. Remark 7. The proposed off-policy RL method is to learn the solution of the HJI equation (4) and the H control policy (5). It follows from Theorem 3 that the control policy bu(i) designed by the off-policy RL will uniformly converge to the H control policy u . With the H control policy, it is noted from Lemma 1 that the closed-loop system (1) with w(t) 0 is locally asymptotically stable. Furthermore, it is observed from (3) that for the closed-loop system with disturbance w(t) L2[0, ), the output z(t) is in L2[0, ) [62], i.e., the closed-loop system is (bounded-input bounded- output) stable. V. OFF-POLICY REINFORCEMENT LEARNING FOR LINEAR H CONTROL In this section, the developed NN-based off-policy RL method (i.e., Algorithm 2) is simpli ed for linear H control design. Consider the linear system: x(t) =Ax(t) + B2u(t) + B1w(t) (39) z(t) =Cx (40) where A Rn n, B1 Rn q, B2 Rn m and C Rp n. Then, the HJI equation (4) of the linear system (39) and (40) results in an algebraic Riccati equation (ARE) [46], [62]: AT P + PA + Q + 2PB1BT 1 P PB2R 1BT 2 P = 0 (41) where Q = CT C. If ARE (41) has a stabilizing solution P 0, the solution of the HJI equation (4) of the linear system (39) and (40) is V (x) = xT Px, and then the linear H control policy (5) is accordingly given by u (x) = R 1BT 2 Px. (42) Consequently, V (i)(x) = xT P (i)x, then the iterative equa- tions (9)-(11) in Algorithm 1 are respectively represented with u(i) = R 1BT 2 P (i)x (43) w(i) = 2BT 1 P (i)x (44) A T i P (i+1) + P (i+1)Ai + Q (i) = 0 (45) where Ai A+ 2B1BT 1 P (i) B2R 1BT 2 P (i) and Q (i) Q 2P (i)B1BT 1 P (i) +P (i)B2R 1 BT 2 P (i). Similar to the derivation of the off-policy RL method for nonlinear H control design in Section IV, rewrite the linear system (39) as x = Ax+B2u(i)+B1w(i)+B2[u u(i)]+B1[w w(i)]. (46) IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 9 Based on equations (43)-(46), the equation (14) is given by Z t+ t t xT ( )P (i+1)B2 h u( ) + R 1BT 2 P (i)x( ) i d + Z t+ t t xT ( )P (i+1)B1 h w( ) 2BT 1 P (i)x( ) i d + [x(t) x(t + t)]T P (i+1)[x(t) x(t + t)] = Z t+ t t xT ( )Q (i)x( )d (47) where P (i+1) is a n n unknown matrix to be learned. For notation simplicity, de ne x(x(t)) x(t) x(t + t) xx(x(t)) Z t+ t t x( ) x( )d ux(x(t), u(t)) Z t+ t t u( ) x( )d wx(x(t), w(t)) Z t+ t t w( ) x( )d where denotes Kronecker product. Each term of equation (47) can be written as: Z t+ t t xT ( )P (i+1)B2u( )d = T ux(x(t), u(t))(BT 2 I)vec(P (i+1)) Z t+ t t xT ( )P (i+1)B2R 1BT 2 P (i)x( )d = T xx(x(t))(P (i)B2R 1BT 2 I)vec(P (i+1)) Z t+ t t xT ( )P (i+1)B1w( )d = T wx(x(t), w(t))(BT 1 I)vec(P (i+1)) 2 Z t+ t t xT ( )P (i+1)B1BT 1 P (i)x( )d = 2 T xx(x(t))(P (i)B1BT 1 I)vec(P (i+1)) [x(t) x(t + t)]T P (i+1)[x(t) x(t + t)] = T x(x(t))vec(P (i+1)) Z t+ t t xT ( )Q (i)x( )d = T xx(x(t))vec(Q (i)) where vec(P) denotes the vectorization of the matrix P formed by stacking the columns of P into a single column vector. Then, equation (47) can be rewritten as (i)(x(t), u(t), w(t))vec(P (i+1)) = (i)(x(t)) (48) with (i)(x(t), u(t), w(t)) = T ux(x(t), u(t))(BT 2 I) + T wx(x(t), w(t))(BT 1 I) + T x(x(t)) 2(P (i)B1BT 1 I)] (i)(x(t)) = T xx(x(t))vec(Q (i)). It is noted that equation (48) is equivalent to the equation (26) with residual error (i) = 0. This is because no cost 0 1 2 3 4 5 1 0 1 2 3 iteration (i) weights ( (i)) 1 (i) 2 (i) 3 (i) Fig. 1: For the linear F16 aircraft plant, the critic NN weights (i) 1 (i) 3 at each iteration. 0 1 2 3 4 5 0.5 0 0.5 1 1.5 2 iteration (i) weights ( (i)) 4 (i) 5 (i) 6 (i) Fig. 2: For the linear F16 aircraft plant, the critic NN weights (i) 4 (i) 6 at each iteration. function approximation is required for linear systems. Then, by collecting sample set SM for computing ux, wx, xx and x, a more simpler least-square scheme (31) can be derived to obtain the unknown parameter vector vec(P (i+1)) accordingly. VI. SIMULATION STUDIES In this section, the ef ciency of the developed NN-based off-policy RL method is tested on a F16 aircraft plant. Then, it is applied to the rotational/translational actuator (RTAC) nonlinear benchmark problem. A. Ef ciency test on linear F16 aircraft plant Consider a F16 aircraft plant that used in [32], [46], [48], [63], where the system dynamics is described by a linear continuous-time model: x = 1.01887 0.90506 0.00215 0.82225 1.07741 0.17555 0 0 1 x + 0 0 1 u + 1 0 0 w (49) z =x. (50) where the system state vector is x = [ q e]T , denotes the angle of attack, q is the pitch rate and e is the elevator de ection angle. The control input u is the elevator actuator voltage and the disturbance w is wind gusts on angle of attack. Select R = 1 and = 5 for the L2-gain performance (3). Then, solve the associated ARE (41) with the MATLAB command CARE, we obtain P = 1.6573 1.3954 0.1661 1.3954 1.6573 0.1804 0.1661 0.1804 0.4371 . For linear systems, the solution of the HJI equation is V (x) = xT Px, thus the complete activation function vector for critic NN is (x) =  x2 1 x1x2 x1x3 x2 2 x2x3 x2 3 T of size L = 6. Then, the idea critic NN weight vector is = [p11 2p12 2p13 p22 2p23 p33]T = [1.6573 2.7908 0.3322 1.6573 0.3608 0.4371]T. Letting initial critic NN weight (0) l = 0(l = 1, ..., 6), iterative stop criterion = 10 7 and integral time interval t = 0.1s, Algorithm 2 is applied to IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 10 0 1 2 3 1 0 1 2 3 iteration (i) weights ( (i)) 1 (i) 2 (i) 3 (i) 4 (i) 5 (i) Fig. 3: For the RTAC sys- tem, the critic NN (i) 1 (i) 5 weights at each itera- tion. 0 1 2 3 2 1.5 1 0.5 0 0.5 1 iteration (i) weights ( (i)) 6 (i) 7 (i) 8 (i) 9 (i) 10 (i) Fig. 4: For the RTAC sys- tem, the critic NN (i) 6 (i) 10 weights at each itera- tion. learn the solution of the ARE. To generate sample set SM, let sample size M = 100 and generate random noise in interval [0,0.1] as input signals. Figures 1-2 give the critic NN weight (i) at each iteration, in which the dash lines represent idea values of . It is observed from the gures that the critic NN weight vector converges to the idea values of at i = 5 iteration. Then, the ef ciency of the developed off-policy RL method is veri ed. In addition, to test the in uence of the parameter t to Algorithm 2, we re-conduct simulation with different param- eter cases: t = 0.2, 0.3, 0.4, 0.5s, and the results show that the critic NN weight vector (i) still converges to the idea values of at i = 5 iteration for all cases. This implies that the developed off-policy RL algorithm 2 is insensitive to the parameter t. B. Application to the rotational/translational actuator nonlin- ear benchmark problem The RTAC nonlinear benchmark problem [40], [44], [64] has been widely used to test the abilities of control methods. The dynamics of this nonlinear plant poses challenges because the rotational and translation motions are coupled. The RTAC system is given as follows: x = x2 x1 + x2 4 sin x3 1 2 cos2 x3 x4 cos x3(x1 x2 4 sin x3) 1 2 cos2 x3 + 0 cos x3 1 2 cos2 x3 0 1 1 2 cos2 x3 u + 0 1 1 2 cos2 x3 0 cos x3 1 2 cos2 x3 w (51) z = 0.1Ix (52) where = 0.2. For the L2-gain performance (3), let R = 1 and = 6. Then, the developed off-policy RL method is used to solve the nonlinear H control problem of system (51) and 0 20 40 60 80 100 0.4 0.2 0 0.2 0.4 time t(s) x1 x2 Fig. 5: The state trajectories x1(t), x2(t) of the closed- loop RTAC system. 0 20 40 60 80 100 1 0.5 0 0.5 1 time t(s) x3 x4 Fig. 6: The state trajectories x3(t), x4(t) of the closed- loop RTAC system. (52). Select the critic NN activation function vector as (x) = [x2 1 x1x2 x1x3 x1x4 x2 2 x2x3 x2x4 x2 3 x3x4 x2 4 x3 1x2 x3 1x3 x3 1x4 x2 1x2 2 x2 1x2x3 x2 1x2x4 x2 1x2 3 x2 1x3x4 x2 1x2 4 x1x3 2]T of size L = 20. With the initial critic NN weight (0) l = 0(l = 1, ..., 20), iterative stop criterion = 10 7 and integral time interval t = 0.033s, Algorithm 2 is applied to learn the solution of the HJI equation. To generate sample set SM, let sample size M = 300 and generate random noise in interval [0,0.5] as input signals. It is found that the critic NN weight vector converges fast to (3) = [0.3285 1.5877 0.2288 0.7028 0.4101 1.2514 0.5448 0.4595 0.4852 0.2078 1.3857 1.7518 1.1000 0.5820 0.1950 0.0978 1.0295 0.2773 0.2169 0.2463]T at i = 3 iteration. Figures 3-4 show rst 10 critic NN weights (i.e., (i) 1 (i) 10 ) at each iteration. With the con- vergent critic NN weight vector (3), the H control policy can be computed with (22). Under the disturbance signal w(t) = 0.2r1(t)e 0.2tcos(t), (r1(t) [0, 1] is a random number), closed-loop simulation is conducted with the H control policy. Figures 5-7 give the trajectories of state and control policy. To show the relationship between L2-gain and time, de ne the following ratio of disturbance attenuation as rd(t) = R t 0   z( ) 2 + u( ) 2 R  d R t 0 w( ) 2d ! 1 2 . Figure 8 shows the curve of rd(t) , where it converges to 3.7024(< = 6) as time increases, which implies that the designed H control law can achieve a prescribed L2-gain performance level for the closed-loop system. VII. CONCLUSIONS A NN-based off-policy RL method has been developed to solve the H control problem of continuous-time systems with unknown internal system model. Based on the model- based SPUA, an off-policy RL method is derived, which can learn the solution of HJI equation from the system data generated by arbitrary control and disturbance signals. The implementation of the off-policy RL method is based IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 11 0 20 40 60 80 100 0.4 0.2 0 0.2 0.4 u(t) time t(s) Fig. 7: The control trajec- tory u(t) of the closed-loop RTAC system. 0 20 40 60 80 100 0 1 2 3 4 time t(s) rd(t) Fig. 8: The curve rd(t) of the closed-loop RTAC sys- tem. on an actor-critic structure, where only one NN is required for approximating the cost function, and then a least-square scheme is derived for NN weights update. The effectiveness of the proposed NN-based off-policy RL method is tested on a linear F16 aircraft plant and a nonlinear RTAC problem. REFERENCES [1] L. P. Kaelbling, M. L. Littman, and A. W. Moore, Reinforcement learning: A survey, Journal of Arti cial Intelligence Research, vol. 4, pp. 237 285, 1996. [2] R. S. Sutton and A. G. Barto, Reinforcement Learning: An Introduction. Cambridge Univ Press, Massachusetts London, England, 1998. [3] D. P. Bertsekas, Dynamic Programming and Optimal Control, vol. 1. Nashua: Athena Scienti c, 2005. [4] W. B. Powell, Approximate Dynamic Programming: Solving the Curses of Dimensionality, vol. 703. Hoboken, N.J.: John Wiley & Sons, 2007. [5] J. J. Murray, C. J. Cox, G. G. Lendaris, and R. Saeks, Adaptive dynamic programming, IEEE Transactions on Systems, Man, and Cybernetics, Part C: Applications and Reviews, vol. 32, no. 2, pp. 140 153, 2002. [6] V. Yadav, R. Padhi, and S. Balakrishnan, Robust/optimal temperature pro le control of a high-speed aerospace vehicle using neural networks, IEEE Transactions on Neural Networks, vol. 18, no. 4, pp. 1115 1128, 2007. [7] H. Zhang, Q. Wei, and Y. Luo, A novel in nite-time optimal tracking control scheme for a class of discrete-time nonlinear systems via the greedy HDP iteration algorithm, IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics, vol. 38, no. 4, pp. 937 942, 2008. [8] D. Vrabie, O. Pastravanu, M. Abu-Khalaf, and F. L. Lewis, Adaptive optimal control for continuous-time linear systems based on policy iteration, Automatica, vol. 45, no. 2, pp. 477 484, 2009. [9] D. Vrabie and F. L. Lewis, Neural network approach to continuous- time direct adaptive optimal control for partially unknown nonlinear systems, Neural Networks, vol. 22, no. 3, pp. 237 246, 2009. [10] H. Zhang, Y. Luo, and D. Liu, Neural-network-based near-optimal control for a class of discrete-time af ne nonlinear systems with control constraints, IEEE Transactions on Neural Networks, vol. 20, no. 9, pp. 1490 1503, 2009. [11] H. Zhang, L. Cui, X. Zhang, and Y. Luo, Data-driven robust approx- imate optimal tracking control for unknown general nonlinear systems using adaptive dynamic programming method, IEEE Transactions on Neural Networks, vol. 22, no. 12, pp. 2226 2236, 2011. [12] B. Luo and H.-N. Wu, Online policy iteration algorithm for optimal control of linear hyperbolic PDE systems, Journal of Process Control, vol. 22, no. 7, pp. 1161 1170, 2012. [13] D. Vrabie, F. L. Lewis, and K. G. Vamvoudakis, Optimal Adaptive Control and Differential Games by Reinforcement Learning Principles. IET Press, 2012. [14] D. Liu, D. Wang, D. Zhao, Q. Wei, and N. Jin, Neural-network-based optimal control for a class of unknown discrete-time nonlinear systems using globalized dual heuristic programming, IEEE Transactions on Automation Science and Engineering, vol. 9, no. 3, pp. 628 634, 2012. [15] B. Luo and H.-N. Wu, Approximate optimal control design for nonlin- ear one-dimensional parabolic PDE systems using empirical eigenfunc- tions and neural network, IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics, vol. 42, no. 6, pp. 1538 1549, 2012. [16] H.-N. Wu and B. Luo, Heuristic dynamic programming algorithm for optimal control design of linear continuous-time hyperbolic PDE systems, Industrial & Engineering Chemistry Research, vol. 51, no. 27, pp. 9310 9319, 2012. [17] D. Liu and Q. Wei, Finite-approximation-error-based optimal control approach for discrete-time nonlinear systems, IEEE Transactions on Cybernetics, vol. 43, no. 2, pp. 779 789, 2013. [18] Q. Wei and D. Liu, A novel iterative -adaptive dynamic programming for discrete-time nonlinear systems, IEEE Transactions on Automation Science and Engineering, DOI: 10.1109/TASE.2013.2280974, Online Available, 2013. [19] D. Liu, D. Wang, and H. Li, Decentralized stabilization for a class of continuous-time nonlinear interconnected systems using online learning optimal control approach, IEEE Transactions on Neural Networks and Learning Systems, vol. 25, no. 2, pp. 418 428, 2014. [20] B. Luo, H.-N. Wu, T. Huang, and D. Liu, Data-based approximate policy iteration for nonlinear continuous-time optimal control design, arXiv preprint arXiv:1311.0396, 2013. [21] H. Modares, F. L. Lewis, and M.-B. Naghibi-Sistani, Integral rein- forcement learning and experience replay for adaptive optimal control of partially-unknown constrained-input continuous-time systems, Auto- matica, vol. 50, no. 1, pp. 193 202, 2014. [22] D. Liu and Q. Wei, Policy iteration adaptive dynamic programming algorithm for discrete-time nonlinear systems, IEEE Transactions on Neural Networks and Learning Systems, vol. 25, no. 3, pp. 621 634, 2014. [23] B. Luo, H.-N. Wu, and H.-X. Li, Data-based suboptimal neuro- control design with reinforcement learning for dissipative spatially distributed processes, Industrial & Engineering Chemistry Research, DOI: 10.1021/ie4031743, Online Available, 2014. [24] K. Zhou, J. C. Doyle, and K. Glover, Robust and Optimal Control. Prentice Hall New Jersey, 1996. [25] A. v. d. Schaft, L2-Gain and Passivity in Nonlinear Control. Springer- Verlag New York, Inc., 1996. [26] T. Bas ar and P. Bernhard, H Optimal Control and Related Minimax Design Problems: A Dynamic Game Approach. Springer, 2008. [27] A. v. d. Schaft, L2-gain analysis of nonlinear systems and nonlinear state-feedback H control, IEEE Transactions on Automatic Control, vol. 37, no. 6, pp. 770 784, 1992. [28] A. Isidori and W. Kang, H control via measurement feedback for general nonlinear systems, IEEE Transactions on Automatic Control, vol. 40, no. 3, pp. 466 472, 1995. [29] A. Isidori and A. Astol , Disturbance attenuation and H -control via measurement feedback in nonlinear systems, IEEE Transactions on Automatic Control, vol. 37, no. 9, pp. 1283 1293, 1992. [30] R. W. Beard, Successive Galerkin approximation algorithms for nonlin- ear optimal and robust control, International Journal of Control, vol. 71, no. 5, pp. 717 743, 1998. [31] M. Abu-Khalaf, F. L. Lewis, and J. Huang, Policy iterations on the Hamilton Jacobi Isaacs equation for H state feedback control with input saturation, IEEE Transactions on Automatic Control, vol. 51, no. 12, pp. 1989 1995, 2006. [32] K. G. Vamvoudakis and F. L. Lewis, Online solution of nonlinear two-player zero-sum games using synchronous policy iteration, Inter- national Journal of Robust and Nonlinear Control, vol. 22, no. 13, pp. 1460 1483, 2012. [33] Y. Feng, B. Anderson, and M. Rotkowitz, A game theoretic algorithm to compute local stabilizing solutions to HJBI equations in nonlinear H control, Automatica, vol. 45, no. 4, pp. 881 888, 2009. [34] D. Liu, H. Li, and D. Wang, Neural-network-based zero-sum game for discrete-time nonlinear systems via iterative adaptive dynamic pro- gramming algorithm, Neurocomputing, vol. 110, no. 13, pp. 92 100, 2013. [35] N. Sakamoto and A. v. d. Schaft, Analytical approximation methods for the stabilizing solution of the Hamilton Jacobi equation, IEEE Transactions on Automatic Control, vol. 53, no. 10, pp. 2335 2350, 2008. [36] G. N. Saridis and C.-S. G. Lee, An approximation theory of optimal control for trainable manipulators, IEEE Transactions on Systems, Man and Cybernetics, vol. 9, no. 3, pp. 152 159, 1979. [37] R. W. Beard, G. N. Saridis, and J. T. Wen, Galerkin approximations of the generalized Hamilton-Jacobi-Bellman equation, Automatica, vol. 33, no. 12, pp. 2159 2177, 1997. [38] R. Beard, G. Saridis, and J. Wen, Approximate solutions to the time- invariant Hamilton Jacobi Bellman equation, Journal of Optimization Theory and Applications, vol. 96, no. 3, pp. 589 626, 1998. IEEE TRANSACTIONS ON CYBERNETICS, VOL. 99 , NO. PP, IN PRESS, 2014 12 [39] S. Mehraeen, T. Dierks, S. Jagannathan, and M. L. Crow, Zero-sum two-player game theoretic formulation of af ne nonlinear discrete-time systems using neural networks, IEEE Transactions on Cybernetics, vol. 43, no. 6, pp. 1641 1655, 2013. [40] M. Abu-Khalaf, F. L. Lewis, and J. Huang, Neurodynamic program- ming and zero-sum games for constrained control systems, IEEE Transactions on Neural Networks, vol. 19, no. 7, pp. 1243 1252, 2008. [41] H. Modares, F. L. Lewis, and M.-B. N. Sistani, Online solution of nonquadratic two-player zero-sum games arising in the H control of constrained input systems, International Journal of Adaptive Control and Signal Processing, p. In Press, 2014. [42] H. Zhang, Q. Wei, and D. Liu, An iterative adaptive dynamic pro- gramming method for solving a class of nonlinear zero-sum differential games, Automatica, vol. 47, no. 1, pp. 207 214, 2011. [43] K. G. Vamvoudakis and F. L. Lewis, Online actor critic algorithm to solve the continuous-time in nite horizon optimal control problem, Automatica, vol. 46, no. 5, pp. 878 888, 2010. [44] B. Luo and H.-N. Wu, Computationally ef cient simultaneous pol- icy update algorithm for nonlinear H state feedback control with Galerkin s method, International Journal of Robust and Nonlinear Control, vol. 23, no. 9, pp. 991 1012, 2013. [45] J. Huang and C.-F. Lin, Numerical approach to computing nonlinear H control laws, Journal of Guidance, Control, and Dynamics, vol. 18, no. 5, pp. 989 994, 1995. [46] H.-N. Wu and B. Luo, Simultaneous policy update algorithms for learning the solution of linear continuous-time H state feedback control, Information Sciences, vol. 222, pp. 472 485, 2013. [47] D. Vrabie and F. Lewis, Adaptive dynamic programming for online solution of a zero-sum differential game, Journal of Control Theory and Applications, vol. 9, no. 3, pp. 353 360, 2011. [48] H.-N. Wu and B. Luo, Neural network based online simultaneous policy update algorithm for solving the HJI equation in nonlinear H control, IEEE Transactions on Neural Networks and Learning Systems, vol. 23, no. 12, pp. 1884 1895, 2012. [49] H. Zhang, L. Cui, and Y. Luo, Near-optimal control for nonzero-sum differential games of continuous-time nonlinear systems using single- network ADP, IEEE Transactions on Cybernetics, vol. 43, no. 1, pp. 206 216, 2013. [50] S. B. Thrun, Ef cient exploration in reinforcement learning, Carnegie Mellon University Pittsburgh, PA, USA, Tech. Rep. CMU-CS-92-102, 1992. [51] R. Courant and D. Hilbert, Methods of Mathematical Physics, vol. 1. Wiley, 2004. [52] B. A. Finlayson, The Method of Weighted Residuals and Variational Principles: With Applications in Fluid Mechanics, Heat and Mass Transfer, vol. 87. New York: Academic Press, Inc., 1972. [53] G. Peter Lepage, A new algorithm for adaptive multidimensional integration, Journal of Computational Physics, vol. 27, no. 2, pp. 192 203, 1978. [54] J. A. Farrell and M. M. Polycarpou, Adaptive Approximation Based Control: Unifying Neural, Fuzzy and Traditional Adaptive Approxima- tion Approaches, vol. 48. John Wiley & Sons, 2006. [55] J.-J. E. Slotine, W. Li, et al., Applied Nonlinear Control, vol. 199. Prentice-Hall Englewood Cliffs, NJ, 1991. [56] D. Kleinman, On an iterative technique for Riccati equation computa- tions, IEEE Transactions on Automatic Control, vol. 13, no. 1, pp. 114 115, 1968. [57] M. Abu-Khalaf and F. L. Lewis, Nearly optimal control laws for nonlinear systems with saturating actuators using a neural network HJB approach, Automatica, vol. 41, no. 5, pp. 779 791, 2005. [58] Z. Chen and S. Jagannathan, Generalized Hamilton Jacobi Bellman formulation-based neural network control of af ne nonlinear discrete- time systems, IEEE Transactions on Neural Networks, vol. 19, no. 1, pp. 90 106, 2008. [59] K. G. Vamvoudakis and F. L. Lewis, Multi-player non-zero-sum games: online adaptive learning solution of coupled Hamilton Jacobi equations, Automatica, vol. 47, no. 8, pp. 1556 1569, 2011. [60] D. Precup, R. S. Sutton, and S. Dasgupta, Off-policy temporal- difference learning with function approximation, in Proceedings of the 18th ICML, pp. 417 424, 2001. [61] H. R. Maei, C. Szepesv ari, S. Bhatnagar, and R. S. Sutton, Toward off- policy learning control with function approximation, in Proceedings of the 27th ICML, pp. 719 726, 2010. [62] M. Green and D. J. Limebeer, Linear Robust Control. Prentice-Hall, Englewood Cliffs, NJ, 1995. [63] B. L. Stevens and F. L. Lewis, Aircraft Control and Simulation. Wiley- Interscience, 2003. [64] G. Escobar, R. Ortega, and H. Sira-Ramirez, An L2 disturbance attenuation solution to the nonlinear benchmark problem, International Journal of Robust and Nonlinear Control, vol. 8, no. 4-5, pp. 311 330, 1999. Biao Luo received the B.E. degree in Measuring and Control Technology and Instrumentations and the M. E. degree in Control Theory and Control Engineer- ing from Xiangtan University, Xiangtan, China, in 2006 and 2009, respectively. He is now working for the Ph. D. degree in Control Science and Engineer- ing with Beihang University (Beijing University of Aeronautics and Astronautics), Beijing, China. From February 2013 to August 2013, he was a Research Assistant with the Department of System Engineering and Engineering Management (SEEM), City University of Hong Kong, Kowloon, Hong Kong. From September 2013 to December 2013, he was a Research Assistant with Department of Mathematics and Science, Texas A&M University at Qatar, Doha, Qatar. His current research interests include distributed parameter systems, optimal control, data-based control, fuzzy/neural modeling and control, hypersonic entry/reentry guidance, learning and control from big data, reinforcement learning, approximate dynamic programming, and evolutionary computation. Mr. Luo was a recipient of the Excellent Master Dissertation Award of Hunan Province in 2011. Huai-Ning Wu was born in Anhui, China, on November 15, 1972. He received the B.E. degree in automation from Shandong Institute of Building Materials Industry, Jinan, China and the Ph.D. de- gree in control theory and control engineering from Xian Jiaotong University, Xian, China, in 1992 and 1997, respectively. From August 1997 to July 1999, he was a Post- doctoral Researcher in the Department of Electronic Engineering at Beijing Institute of Technology, Bei- jing, China. In August 1999, he joined the School of Automation Science and Electrical Engineering, Beihang University (formerly Beijing University of Aeronautics and Astronautics), Beijing. From December 2005 to May 2006, he was a Senior Research Associate with the Department of Manufacturing Engineering and Engineering Management (MEEM), City University of Hong Kong, Kowloon, Hong Kong. From October to December during 2006-2008 and from July to August in 2010, he was a Research Fellow with the Department of MEEM, City University of Hong Kong. From July to August in 2011 and 2013, he was a Research Fellow with the Department of Systems Engineering and Engineering Management, City University of Hong Kong. He is currently a Professor with Beihang University. His current research interests include robust control, fault-tolerant control, distributed parameter systems, and fuzzy/neural modeling and control. Dr. Wu serves as Associate Editor of the IEEE Transactions on Systems, Man & Cybernetics: Systems. He is a member of the Committee of Technical Process Failure Diagnosis and Safety, Chinese Association of Automation. Tingwen Huang is a Professor at Texas A& M University at Qatar. He received his B.S. degree from Southwest Normal University (now Southwest Uni- versity), China, 1990, his M.S. degree from Sichuan University, China, 1993, and his Ph.D. degree from Texas A& M University, College Station, Texas, 2002. After graduated from Texas A&M University, he worked as a Visiting Assistant Professor there. Then he joined Texas A& M University at Qatar (TAMUQ) as an Assistant Professor in August 2003, then he was promoted to Professor in 2013. Dr. Huangs focus areas for research interests include neural networks, chaotic dynamical systems, complex networks, optimization and control. He has authored and co-authored more than 100 refereed journal papers.